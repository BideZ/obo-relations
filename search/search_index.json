{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Relation Ontology About This is the reference guide for the OBO Relation Ontology (RO). RO is a collection of relations intended primarily for standardization across ontologies in the OBO Foundry and wider OBO library. It incorporates core upper-level relations such as part of (BFO:0000050) as well as biology-specific relationship types such as develops from (RO:0002202) . Website: https://oborel.github.io/ This documentation: https://oborel.github.io/obo-relations/ GitHub project: https://github.com/oborel/obo-relations/ OBO Page: http://obofoundry.org/ontology/ro Browsing and Download Browse on OLS: OLS (click properties tab) Browse on OntoBee: OntoBee Currently the optimal way to browse RO is to download Protege and load the owl files . Use the following URIs to download this ontology: http://purl.obolibrary.org/obo/ro.owl http://purl.obolibrary.org/obo/ro.obo http://purl.obolibrary.org/obo/ro.json The OWL product is more expressive than the OBO format one, and includes additional axioms. See also: Contributing CONTRIBUTING.md Join the Google Group Request new relations via the obo-relations issue tracker","title":"Index"},{"location":"#relation-ontology","text":"","title":"Relation Ontology"},{"location":"#about","text":"This is the reference guide for the OBO Relation Ontology (RO). RO is a collection of relations intended primarily for standardization across ontologies in the OBO Foundry and wider OBO library. It incorporates core upper-level relations such as part of (BFO:0000050) as well as biology-specific relationship types such as develops from (RO:0002202) . Website: https://oborel.github.io/ This documentation: https://oborel.github.io/obo-relations/ GitHub project: https://github.com/oborel/obo-relations/ OBO Page: http://obofoundry.org/ontology/ro","title":"About"},{"location":"#browsing-and-download","text":"Browse on OLS: OLS (click properties tab) Browse on OntoBee: OntoBee Currently the optimal way to browse RO is to download Protege and load the owl files . Use the following URIs to download this ontology: http://purl.obolibrary.org/obo/ro.owl http://purl.obolibrary.org/obo/ro.obo http://purl.obolibrary.org/obo/ro.json The OWL product is more expressive than the OBO format one, and includes additional axioms. See also:","title":"Browsing and Download"},{"location":"#contributing","text":"CONTRIBUTING.md Join the Google Group Request new relations via the obo-relations issue tracker","title":"Contributing"},{"location":"annotation-properties/","text":"Annotation Properties In OWL Annotation Properties are 'non-logical' properties that connect individuals, classes, ObjectProperty, other annotation properties etc with other object or with literal values. Technically, it connects the IRI of these entities. The 'non-logical' aspect means they are ignored for reasoning purposes. They are primarily used for metadata: labels, definitions, synonyms, attribution, notes and comments, etc. See the OWL Primer for more details. Annotation Properties in RO RO makes use of annotation properties from other ontologies (e.g. RDFS, IAO) and in addition defines annotation properties that can be used in other ontologies. See flat list of RO annotation properties in OntoBee Or start from a root annotation property, e.g. http://purl.obolibrary.org/obo/RO_0002416 In RO we aim to have comprehensive metadata for each ObjectProperty declared. In practice we often fall short, but this is something we are striving to improve. Metadata is provided via annotation assertions using annotation properties (APs), and other object types, from a variety of ontologies, including: IAO/metadata dublin core RDFS OboInOwl We have also defined APs within RO. Some of these may migrate to IAO. Definitions Like all OBO ontologies, definitions are provided using an http://purl.obolibrary.org/obo/IAO_0000115 'definition' AP. We strive to give each OP a definition. In practice we may omit definitions for OPs that are trivially the inverse of another defined OP (TODO link to tracker). Definition Source and Attribution Notes curator notes: aimed at curator users of ontologies editor notes: primarily internal notes for other RO editors, but exposed for the sake of transparency Synonyms and alternate terms 'OBO foundry unique label' is used where the primary label could potentially be ambiguous when compared to other ontologies. Provenance and Attribution We currently use IAO 'term editor' APs to record a literal with the full name of the person who added the term to the ontology. The IAO def of this is: \"Name of editor entering the term in the file. The term editor is a point of contact for information regarding the term. The term editor may be, but is not always, the author of the definition, which may have been worked upon by several people\" We may decide to use ORCIDs in future. NOTE: we have recently switched to using the created_by tag as this is supported directly in Protege. We need to go back and standardize use of some of these properties. Curation Status","title":"Annotation Properties"},{"location":"annotation-properties/#annotation-properties","text":"In OWL Annotation Properties are 'non-logical' properties that connect individuals, classes, ObjectProperty, other annotation properties etc with other object or with literal values. Technically, it connects the IRI of these entities. The 'non-logical' aspect means they are ignored for reasoning purposes. They are primarily used for metadata: labels, definitions, synonyms, attribution, notes and comments, etc. See the OWL Primer for more details.","title":"Annotation Properties"},{"location":"annotation-properties/#annotation-properties-in-ro","text":"RO makes use of annotation properties from other ontologies (e.g. RDFS, IAO) and in addition defines annotation properties that can be used in other ontologies. See flat list of RO annotation properties in OntoBee Or start from a root annotation property, e.g. http://purl.obolibrary.org/obo/RO_0002416 In RO we aim to have comprehensive metadata for each ObjectProperty declared. In practice we often fall short, but this is something we are striving to improve. Metadata is provided via annotation assertions using annotation properties (APs), and other object types, from a variety of ontologies, including: IAO/metadata dublin core RDFS OboInOwl We have also defined APs within RO. Some of these may migrate to IAO.","title":"Annotation Properties in RO"},{"location":"annotation-properties/#definitions","text":"Like all OBO ontologies, definitions are provided using an http://purl.obolibrary.org/obo/IAO_0000115 'definition' AP. We strive to give each OP a definition. In practice we may omit definitions for OPs that are trivially the inverse of another defined OP (TODO link to tracker).","title":"Definitions"},{"location":"annotation-properties/#definition-source-and-attribution","text":"","title":"Definition Source and Attribution"},{"location":"annotation-properties/#notes","text":"curator notes: aimed at curator users of ontologies editor notes: primarily internal notes for other RO editors, but exposed for the sake of transparency","title":"Notes"},{"location":"annotation-properties/#synonyms-and-alternate-terms","text":"'OBO foundry unique label' is used where the primary label could potentially be ambiguous when compared to other ontologies.","title":"Synonyms and alternate terms"},{"location":"annotation-properties/#provenance-and-attribution","text":"We currently use IAO 'term editor' APs to record a literal with the full name of the person who added the term to the ontology. The IAO def of this is: \"Name of editor entering the term in the file. The term editor is a point of contact for information regarding the term. The term editor may be, but is not always, the author of the definition, which may have been worked upon by several people\" We may decide to use ORCIDs in future. NOTE: we have recently switched to using the created_by tag as this is supported directly in Protege. We need to go back and standardize use of some of these properties.","title":"Provenance and Attribution"},{"location":"annotation-properties/#curation-status","text":"","title":"Curation Status"},{"location":"causal-relations/","text":"Causal Relations in RO The best place to start are the GREEKC slides in Causal Relations in RO: Causal Algebra Here we define a causal algebra for connecting two occurrents p and q according to the causal influence p has on q. We leave open the possibility of generalizing to allow p or q to be qualities. Formulation Our causal algebra is essentially a cross-product of more basic components: T : An Interval Algebra I : A simple set of influence types D : Directionalities The named relations are drawn from T x I x D T: Interval Algebra Note that RO already contains temporal relations for ordering occurrents. This is different from the Allen Algebra, as we take different relations as primitive. I: Influence Influence pertains to whether or not the causal relation is regulatory; direction pertains to the directionality of the change of magnitude of the target. The influence is either regulatory or non-regulatory I = {R,N} A regulatory influence (R) is a causal relation that can be switched on or off to achieve some objective: for example, a cell regulating levels of a cytosolic chemical through the switching off of a GTPase with a GTPase inhibitor. A non-regulatory influence (N) is the complement of this, and is exemplified by two successive steps in a pathway, where the output of the first is required as input for the second. Although the relationship is causal, it is not regulatory as the required input for the second step is not purposefully withheld (or provided); the cell does not use this as a control mechanism. (Note that we assume influence one way or another; the algebra does not permit non-influential/causal relations; these could be done separately using Allen). The following primitive rules hold: R o R \u2192 R R o N \u2192 R N o R \u2192 R N o N \u2192 N i.e. regulation is \u2018infectious\u2019. Note this may seem excessively permissive: a single regulatory link in a very long chain of causal relations renders the entire chain causal. We leave it to individual applications to determine both the degree of causal influence and the extend to which a regulatory component contributes. This may be via probabilistic or quantitive reasoning. This is outside the scope of this symbolic boolean algebra which seeks merely to determine logical potential. Direction The direction is positive, negative or undeclared/neutral/generic Direction = {+1, -1, 0} Although all actual regulatory relationships have a direction, we include the zero state here to assist with defining a formalism that accounts for unknown states. The primitive property chains are obtained through arithmetic multiplication; e.g. +1 \u2218 +1 \u2192 +1 +1 \u2218 -1 \u2192 -1 -1 \u2218 +1 \u2192 -1 -1 \u2218 -1 \u2192 +1 0 \u2218 _ \u2192 0 _ \u2218 0 \u2192 0 Here \u2018_\u2019 is a wildcard, and direction can be inserted. Directness For any pair of atomic activities p and q, if p has some causal influence on q then it can only stand in two possible directness relationships to q D (aka direct): if there is a physical interaction involving participants of p and q I (aka indirect): p precedes q, if there is NO physical interaction involving participants of p and q Cross-Product Our set of causal relations is therefore drawn from T \u00d7 I \u00d7 D The following names are used for members of the cross-product directly positively regulates \u2192 <D,R,+1> directly negatively regulates \u2192 <D,R,-1> indirectly positively regulates \u2192 <I,R,+1> indirectly negatively regulates \u2192 <I,R,-1> regulates \u2192 <*,R,0> positively regulates \u2192 <*,R,+1> negatively regulates \u2192 <*,R,-1> directly provides input for \u2192 <D,N,+1> indirectly provides input for \u2192 <I,N,+1> provides input for \u2192 <*,N,+1> immediately causally upstream of \u2192 <D,*,0> TODO: add PURLs for the above. Note that unidirectional implication is used to leave open the use of different terms for the same members of the cross-product when applied to different domains. We also use the following sub-relations when both p and q are elemental (in the case of GO, these are GO MFs): directly activates \u2192 directly inhibits \u2192 indirectly activates \u2192 indirectly inhibits \u2192 Composition rules Composition rules for the cross-product follow naturally from the individual composition rules of the individual elements. We can also derive: regulates o part_of \u2192 regulates (DEPRECATED) ends_with o regulates \u2192 regulates The first follows from our rules above: processual part of is (if p is part of q it is playing some causal role in it). So we have < ,R,0> o \u2192 < ,R,0>.","title":"Causal Relations"},{"location":"causal-relations/#causal-relations-in-ro","text":"The best place to start are the GREEKC slides in Causal Relations in RO:","title":"Causal Relations in RO"},{"location":"causal-relations/#causal-algebra","text":"Here we define a causal algebra for connecting two occurrents p and q according to the causal influence p has on q. We leave open the possibility of generalizing to allow p or q to be qualities.","title":"Causal Algebra"},{"location":"causal-relations/#formulation","text":"Our causal algebra is essentially a cross-product of more basic components: T : An Interval Algebra I : A simple set of influence types D : Directionalities The named relations are drawn from T x I x D","title":"Formulation"},{"location":"causal-relations/#t-interval-algebra","text":"Note that RO already contains temporal relations for ordering occurrents. This is different from the Allen Algebra, as we take different relations as primitive.","title":"T: Interval Algebra"},{"location":"causal-relations/#i-influence","text":"Influence pertains to whether or not the causal relation is regulatory; direction pertains to the directionality of the change of magnitude of the target. The influence is either regulatory or non-regulatory I = {R,N} A regulatory influence (R) is a causal relation that can be switched on or off to achieve some objective: for example, a cell regulating levels of a cytosolic chemical through the switching off of a GTPase with a GTPase inhibitor. A non-regulatory influence (N) is the complement of this, and is exemplified by two successive steps in a pathway, where the output of the first is required as input for the second. Although the relationship is causal, it is not regulatory as the required input for the second step is not purposefully withheld (or provided); the cell does not use this as a control mechanism. (Note that we assume influence one way or another; the algebra does not permit non-influential/causal relations; these could be done separately using Allen). The following primitive rules hold: R o R \u2192 R R o N \u2192 R N o R \u2192 R N o N \u2192 N i.e. regulation is \u2018infectious\u2019. Note this may seem excessively permissive: a single regulatory link in a very long chain of causal relations renders the entire chain causal. We leave it to individual applications to determine both the degree of causal influence and the extend to which a regulatory component contributes. This may be via probabilistic or quantitive reasoning. This is outside the scope of this symbolic boolean algebra which seeks merely to determine logical potential.","title":"I: Influence"},{"location":"causal-relations/#direction","text":"The direction is positive, negative or undeclared/neutral/generic Direction = {+1, -1, 0} Although all actual regulatory relationships have a direction, we include the zero state here to assist with defining a formalism that accounts for unknown states. The primitive property chains are obtained through arithmetic multiplication; e.g. +1 \u2218 +1 \u2192 +1 +1 \u2218 -1 \u2192 -1 -1 \u2218 +1 \u2192 -1 -1 \u2218 -1 \u2192 +1 0 \u2218 _ \u2192 0 _ \u2218 0 \u2192 0 Here \u2018_\u2019 is a wildcard, and direction can be inserted.","title":"Direction"},{"location":"causal-relations/#directness","text":"For any pair of atomic activities p and q, if p has some causal influence on q then it can only stand in two possible directness relationships to q D (aka direct): if there is a physical interaction involving participants of p and q I (aka indirect): p precedes q, if there is NO physical interaction involving participants of p and q","title":"Directness"},{"location":"causal-relations/#cross-product","text":"Our set of causal relations is therefore drawn from T \u00d7 I \u00d7 D The following names are used for members of the cross-product directly positively regulates \u2192 <D,R,+1> directly negatively regulates \u2192 <D,R,-1> indirectly positively regulates \u2192 <I,R,+1> indirectly negatively regulates \u2192 <I,R,-1> regulates \u2192 <*,R,0> positively regulates \u2192 <*,R,+1> negatively regulates \u2192 <*,R,-1> directly provides input for \u2192 <D,N,+1> indirectly provides input for \u2192 <I,N,+1> provides input for \u2192 <*,N,+1> immediately causally upstream of \u2192 <D,*,0> TODO: add PURLs for the above. Note that unidirectional implication is used to leave open the use of different terms for the same members of the cross-product when applied to different domains. We also use the following sub-relations when both p and q are elemental (in the case of GO, these are GO MFs): directly activates \u2192 directly inhibits \u2192 indirectly activates \u2192 indirectly inhibits \u2192","title":"Cross-Product"},{"location":"causal-relations/#composition-rules","text":"Composition rules for the cross-product follow naturally from the individual composition rules of the individual elements. We can also derive: regulates o part_of \u2192 regulates (DEPRECATED) ends_with o regulates \u2192 regulates The first follows from our rules above: processual part of is (if p is part of q it is playing some causal role in it). So we have < ,R,0> o \u2192 < ,R,0>.","title":"Composition rules"},{"location":"changes-since-2005-paper/","text":"Introduction The original relations ontology (ID space \"OBO_REL\") was a direct translation of the 2005 RO paper into OBO format. It suffered a number of problems, such as lack of clarity in the semantics of class level relations. Here we use \"RO\" to refer to the obo/owl version of the current ontology, and \"OBO_REL\" to refer to the original 2005 version. Note that many of the differences described here were originally announced on the RO and BFO lists Differences Identifiers / IRIs OBO_REL used identifiers of the form \"OBO_REL:part_of\", which were translated to URIs of the form http://obofoundry.org/ro#part_of RO follows the obofoundry ID policy and uses numeric identifiers with corresponding IRIs of the form http://purl.obolibrary.org/obo/RO_nnnnnnn See Identifiers for more details Ceding of relations to BFO We have ceded some core relations to BFO, where they are generic and are required to define BFO classes. Examples: http://purl.obolibrary.org/obo/BFO_0000050 is part of (replaces OBO_REL:part_of) These relations were intended to be part of BFO1.2 -- however, this version of BFO was never formally released, and BFO2 instead used temporalized relations. Relations such as BFO:0000050 are now managed within RO, rather than BFO, despite the ID. See ROAndBFO for more information. Elimination of class-level relationships The original OBO_REL followed the Genome Biology paper in defining relations as class-level. However, these class-level relations caused a lot of confusion and are not really required - in OWL (and in OBO-Format, which is a subset of OWL) we have instance level relationships that are quantified (e.g. finger SubClassOf part_of some hand). RO makes a clean break with OBO_REL, and abandons class level relations. For a discussion of how RO aligns with OBO_REL in terms of temporal quantification, see temporal-semantics . An exception is made for a small number of \"macro\" relations such as RO_0002161 (never in taxon), which is modeled as an annotation property and expanded to a more complex OWL statement using an OWL macro expansion engine. See the OWL macros section of the obo format spec for more details Source format For OBO_REL, the source was obo-format, and OWL was derived from this. There was an experiment to use Common Logic Interchange Format as the source, but this was abandoned. The source version of RO is in OWL, and a subset of this is translated to generate ro.obo Elimination of builtins OBO_REL followed the Genome Biology paper in declaring relations \"instance_of\" and \"is_a\". These have been eliminated in RO, because they are redundant with existing OWL predicates ( class assertion and subClassOf , respectively). All relations in RO now correspond to OWL properties . There has been some discussion of bringing back these builtins in a special-purpose edition of the .obo file, see this ticket for more details.","title":"Changes since 2005 paper"},{"location":"changes-since-2005-paper/#introduction","text":"The original relations ontology (ID space \"OBO_REL\") was a direct translation of the 2005 RO paper into OBO format. It suffered a number of problems, such as lack of clarity in the semantics of class level relations. Here we use \"RO\" to refer to the obo/owl version of the current ontology, and \"OBO_REL\" to refer to the original 2005 version. Note that many of the differences described here were originally announced on the RO and BFO lists","title":"Introduction"},{"location":"changes-since-2005-paper/#differences","text":"","title":"Differences"},{"location":"changes-since-2005-paper/#identifiers-iris","text":"OBO_REL used identifiers of the form \"OBO_REL:part_of\", which were translated to URIs of the form http://obofoundry.org/ro#part_of RO follows the obofoundry ID policy and uses numeric identifiers with corresponding IRIs of the form http://purl.obolibrary.org/obo/RO_nnnnnnn See Identifiers for more details","title":"Identifiers / IRIs"},{"location":"changes-since-2005-paper/#ceding-of-relations-to-bfo","text":"We have ceded some core relations to BFO, where they are generic and are required to define BFO classes. Examples: http://purl.obolibrary.org/obo/BFO_0000050 is part of (replaces OBO_REL:part_of) These relations were intended to be part of BFO1.2 -- however, this version of BFO was never formally released, and BFO2 instead used temporalized relations. Relations such as BFO:0000050 are now managed within RO, rather than BFO, despite the ID. See ROAndBFO for more information.","title":"Ceding of relations to BFO"},{"location":"changes-since-2005-paper/#elimination-of-class-level-relationships","text":"The original OBO_REL followed the Genome Biology paper in defining relations as class-level. However, these class-level relations caused a lot of confusion and are not really required - in OWL (and in OBO-Format, which is a subset of OWL) we have instance level relationships that are quantified (e.g. finger SubClassOf part_of some hand). RO makes a clean break with OBO_REL, and abandons class level relations. For a discussion of how RO aligns with OBO_REL in terms of temporal quantification, see temporal-semantics . An exception is made for a small number of \"macro\" relations such as RO_0002161 (never in taxon), which is modeled as an annotation property and expanded to a more complex OWL statement using an OWL macro expansion engine. See the OWL macros section of the obo format spec for more details","title":"Elimination of class-level relationships"},{"location":"changes-since-2005-paper/#source-format","text":"For OBO_REL, the source was obo-format, and OWL was derived from this. There was an experiment to use Common Logic Interchange Format as the source, but this was abandoned. The source version of RO is in OWL, and a subset of this is translated to generate ro.obo","title":"Source format"},{"location":"changes-since-2005-paper/#elimination-of-builtins","text":"OBO_REL followed the Genome Biology paper in declaring relations \"instance_of\" and \"is_a\". These have been eliminated in RO, because they are redundant with existing OWL predicates ( class assertion and subClassOf , respectively). All relations in RO now correspond to OWL properties . There has been some discussion of bringing back these builtins in a special-purpose edition of the .obo file, see this ticket for more details.","title":"Elimination of builtins"},{"location":"design-patterns/","text":"Logical Design Patterns RO makes use of a number of logical ontology design patterns (ODPs). These crop up repeatedly, so it can help to be aware of these. Note that each usage of an ODP should be documented directly in the ontology as well as here.","title":"Design Patterns Overview"},{"location":"design-patterns/#logical-design-patterns","text":"RO makes use of a number of logical ontology design patterns (ODPs). These crop up repeatedly, so it can help to be aware of these. Note that each usage of an ODP should be documented directly in the ontology as well as here.","title":"Logical Design Patterns"},{"location":"direct-and-indirect-relations/","text":"Direct and Indirect forms of relations The following pattern shows up a lot: * \"<R>\" (a Transitive OP) * \"directly <R>\" (non-transitive) And occasionally extended to this: * \"<R>\" (a Transitive OP) * \"directly <R>\" (non-Transitive) * \"indirectly <R>\" (Transitive) The first thing to point out is that the structure is sometimes confusing to users coming from an Object-Oriented Programming perspective. The intuition is that characteristics of the parent should be inherited as characteristics of the child. In fact this is not the case: the direct form of a transitive relation is both a subproperty of the transitive form, and itself non-transitive. This can be seen with a specific example, e.g. http://purl.obolibrary.org/obo/RO_0002202 develops from http://purl.obolibrary.org/obo/RO_0002207 directly develops from Here the 'direct' prefix means that the two structures or classes should be in direct succession (no intermediates). Consider a structure: A directly-develops-from B directly-develops-from C (e.g. A is a limb, B is a limb bud, and C is a limb primordium). From the above, we can infer: 1. A develops-from B develops-from C 2. A develops-from C (1) follows from SubPropertyOf, and (2) follows from (1) and the transitivity axiom. In RO, every usage of this ODP should have an is direct form of annotation; e.g. directly develops from is-direct-form-of 'indirectly develops from'. Note that we do not always create an indirect relation as sibling to the direct form. This is in part because inference of the indirect form can be problemmatic. Note that RO does not include a 'directly part of' relation. For a discussion see: https://keet.wordpress.com/2010/11/14/nontransitive-vs-intransitive-direct-part-whole-relations-in-owl/","title":"Direct and Indirect Relations"},{"location":"direct-and-indirect-relations/#direct-and-indirect-forms-of-relations","text":"The following pattern shows up a lot: * \"<R>\" (a Transitive OP) * \"directly <R>\" (non-transitive) And occasionally extended to this: * \"<R>\" (a Transitive OP) * \"directly <R>\" (non-Transitive) * \"indirectly <R>\" (Transitive) The first thing to point out is that the structure is sometimes confusing to users coming from an Object-Oriented Programming perspective. The intuition is that characteristics of the parent should be inherited as characteristics of the child. In fact this is not the case: the direct form of a transitive relation is both a subproperty of the transitive form, and itself non-transitive. This can be seen with a specific example, e.g. http://purl.obolibrary.org/obo/RO_0002202 develops from http://purl.obolibrary.org/obo/RO_0002207 directly develops from Here the 'direct' prefix means that the two structures or classes should be in direct succession (no intermediates). Consider a structure: A directly-develops-from B directly-develops-from C (e.g. A is a limb, B is a limb bud, and C is a limb primordium). From the above, we can infer: 1. A develops-from B develops-from C 2. A develops-from C (1) follows from SubPropertyOf, and (2) follows from (1) and the transitivity axiom. In RO, every usage of this ODP should have an is direct form of annotation; e.g. directly develops from is-direct-form-of 'indirectly develops from'. Note that we do not always create an indirect relation as sibling to the direct form. This is in part because inference of the indirect form can be problemmatic. Note that RO does not include a 'directly part of' relation. For a discussion see: https://keet.wordpress.com/2010/11/14/nontransitive-vs-intransitive-direct-part-whole-relations-in-owl/","title":"Direct and Indirect forms of relations"},{"location":"domain-or-range-specific-relation/","text":"Domains and ranges It can be useful to have a hierarchy of relations where more specific relations are differentiated by either their domain or range. For example, in RO we have the following hierarchy: RO:0000052 ! inheres in RO:0000080 ! quality of RO:0000092 ! disposition of RO:0000079 ! function of RO:0000081 ! role of inheres-in has a domain of specifically dependent continuant (SDC). All of the sub-relations of inheres-in essentially mean the same thing, they are just refined for different subclass of SDC: RO:0000052 ! inheres in RO:0000080 ! quality of DOMAIN: quality RO:0000092 ! disposition of DOMAIN: disposition RO:0000079 ! function of DOMAIN: function RO:0000081 ! role of DOMAIN: role The sub-relations could be seen as a special form of shortcut relation . One important consideration is that in OWL-DL there is no complete way to infer the more specific form from the general form. This means that if different ontologies are to work together then they must all agree on a particular level, otherwise inferences will be incomplete. For example, if Ontology O1 has: BloodPressure EquivalentTo pressure and quality-of some blood And Ontology O2 has: Individual: bp001 Types: pressure and inheres-in some blood then bp001 will NOT be inferred to be an instance of BloodPressure Of course, inferences over subPropertyOf will be complete. i.e. we can infer the super property from the sub property, just not the reverse. The best we can do is define a SWRL rule: SWRL Specific Relation Pattern The general pattern for a relation R that is refined for a domain class X and a range class Y to a more specific relation S : R(?x,?y), X(?x), Y(?y) -> S(?x,?y) If refinement is only desired for either domain or range, the X or Y condition can be omitted. For example, the abstract relation inheres-in can be refined to quality-of, based on the subject of the relationship: inheres_in(?q,?e), quality(?q) -> quality-of(?q,?e) This strategy is sufficient for inference over individuals, but insufficient for TBox classification","title":"Domain and Ranges"},{"location":"domain-or-range-specific-relation/#domains-and-ranges","text":"It can be useful to have a hierarchy of relations where more specific relations are differentiated by either their domain or range. For example, in RO we have the following hierarchy: RO:0000052 ! inheres in RO:0000080 ! quality of RO:0000092 ! disposition of RO:0000079 ! function of RO:0000081 ! role of inheres-in has a domain of specifically dependent continuant (SDC). All of the sub-relations of inheres-in essentially mean the same thing, they are just refined for different subclass of SDC: RO:0000052 ! inheres in RO:0000080 ! quality of DOMAIN: quality RO:0000092 ! disposition of DOMAIN: disposition RO:0000079 ! function of DOMAIN: function RO:0000081 ! role of DOMAIN: role The sub-relations could be seen as a special form of shortcut relation . One important consideration is that in OWL-DL there is no complete way to infer the more specific form from the general form. This means that if different ontologies are to work together then they must all agree on a particular level, otherwise inferences will be incomplete. For example, if Ontology O1 has: BloodPressure EquivalentTo pressure and quality-of some blood And Ontology O2 has: Individual: bp001 Types: pressure and inheres-in some blood then bp001 will NOT be inferred to be an instance of BloodPressure Of course, inferences over subPropertyOf will be complete. i.e. we can infer the super property from the sub property, just not the reverse. The best we can do is define a SWRL rule:","title":"Domains and ranges"},{"location":"domain-or-range-specific-relation/#swrl-specific-relation-pattern","text":"The general pattern for a relation R that is refined for a domain class X and a range class Y to a more specific relation S : R(?x,?y), X(?x), Y(?y) -> S(?x,?y) If refinement is only desired for either domain or range, the X or Y condition can be omitted. For example, the abstract relation inheres-in can be refined to quality-of, based on the subject of the relationship: inheres_in(?q,?e), quality(?q) -> quality-of(?q,?e) This strategy is sufficient for inference over individuals, but insufficient for TBox classification","title":"SWRL Specific Relation Pattern"},{"location":"editing-ro/","text":"Introduction See * CONTRIBUTING.md Currently the editors guide is maintained in the README-editors.md file.","title":"Editors guide"},{"location":"editing-ro/#introduction","text":"See * CONTRIBUTING.md Currently the editors guide is maintained in the README-editors.md file.","title":"Introduction"},{"location":"examples/","text":"Examples One of the easiest ways to see how a relation is being used is to go to the page for that relation within the context of a particular ontology in OntoBee. GO has part in GO occurs in in GO GO Extensions See Ontology extensions (not yet loaded into OntoBee) CL has plasma membrane part in CL Drosophila anatomy ontology (...Add links here after IRI changes to OntoBee) EHDAA2 develops in in EHDAA2 Uberon develops from in Uberon Others todo...","title":"Examples"},{"location":"examples/#examples","text":"One of the easiest ways to see how a relation is being used is to go to the page for that relation within the context of a particular ontology in OntoBee.","title":"Examples"},{"location":"examples/#go","text":"has part in GO occurs in in GO","title":"GO"},{"location":"examples/#go-extensions","text":"See Ontology extensions (not yet loaded into OntoBee)","title":"GO Extensions"},{"location":"examples/#cl","text":"has plasma membrane part in CL","title":"CL"},{"location":"examples/#drosophila-anatomy-ontology","text":"(...Add links here after IRI changes to OntoBee)","title":"Drosophila anatomy ontology"},{"location":"examples/#ehdaa2","text":"develops in in EHDAA2","title":"EHDAA2"},{"location":"examples/#uberon","text":"develops from in Uberon","title":"Uberon"},{"location":"examples/#others","text":"todo...","title":"Others"},{"location":"history/","text":"History 2005 RO Paper The origins of RO are with the 2005 paper Relations in Biomedical Ontologies , which defined a core set of relations such as is a and part of . This ontology was transcribed into an ontology which was originally called OBO_REL . Note that this original version is obsolete, and there are substantial differences with the current RO . For a detailed description see changes to RO since the 2005 paper RO and BFO Many relations in RO are generic and can be used in other domains. One idea originally proposed was to cede the core relations to the Basic Formal Ontology (BFO). However, we later decided to retain all relations in RO. Note however that a small handful of RO relations retain a BFO ID space, for example, BFO:0000050 (part of). However, these are in fact part of RO, the IDs have been \"donated\". For more details see: RO and BFO . RO Core . Current development Currently RO is actively maintained by core team with contributions by pull request from many community members. See CONTRIBUTING.md releases contributors commits Visual Depiction","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#2005-ro-paper","text":"The origins of RO are with the 2005 paper Relations in Biomedical Ontologies , which defined a core set of relations such as is a and part of . This ontology was transcribed into an ontology which was originally called OBO_REL . Note that this original version is obsolete, and there are substantial differences with the current RO . For a detailed description see changes to RO since the 2005 paper","title":"2005 RO Paper"},{"location":"history/#ro-and-bfo","text":"Many relations in RO are generic and can be used in other domains. One idea originally proposed was to cede the core relations to the Basic Formal Ontology (BFO). However, we later decided to retain all relations in RO. Note however that a small handful of RO relations retain a BFO ID space, for example, BFO:0000050 (part of). However, these are in fact part of RO, the IDs have been \"donated\". For more details see: RO and BFO . RO Core .","title":"RO and BFO"},{"location":"history/#current-development","text":"Currently RO is actively maintained by core team with contributions by pull request from many community members. See CONTRIBUTING.md releases contributors commits","title":"Current development"},{"location":"history/#visual-depiction","text":"","title":"Visual Depiction"},{"location":"identifiers/","text":"Each relation in RO is uniquely identifier by a URI of the form http://purl.obolibrary.org/obo/RO_nnnnnnn Examples: http://purl.obolibrary.org/obo/RO_0002215 capable of http://purl.obolibrary.org/obo/RO_0000302 downstream in neural circuit with Each of these URIs has a corresponding OBO-identifier short form RO:nnnnnnn Note that in OBO-format, use of a shorthand is permitted. For example, in: [Term] id: GO:2001284 name: regulation of BMP secretion intersection_of: GO:0065007 ! biological regulation intersection_of: regulates GO:0038055 ! BMP secretion ... [Typedef] id: regulates name: regulates transitive_over: part_of ! part_of xref: RO:0002211 The equivalence axiom is translated to OWL as: EquivalentClasses(GO_2001284 ObjectIntersectionOf(GO_0065007 ObjectSomeValuesFrom(RO_0002211 GO_0038055))) see Section 8.2.2 of the obo-format specification for details","title":"Identifiers"},{"location":"interaction-relations/","text":"Introduction We frequently want interaction relations to 'shadow' biological process relations. This document describes our current implementation for this. It can be useful to have relations that are shortcuts for more detailed modeling using processes. For example, to model two organisms interacting, we may use an 'interaction' process, with the organisms linked via participation relations. We can then subclass the interaction process class to describe different kinds of interaction. It can also be convenient to have relations that 'shortcut' across the process, e.g. x interacts-with y, x phosphorylates y, x hunts y. The way we do this is via the introduction of 'helper properties'. Unfortunately these clog up the ontology from a browsing perspective, but assist with reasoning. The design pattern is documented here. For every interaction process Proc we create as isProc ObjectProperty that is locally reflexive for any instance of Proc, ie Class: Proc SubClassOf: isProc Self ObjectProperty: isProc SubPropertyOf: 'helper process' (the subPropertyOf axiom does not affect the logic, it exists purely for aesthetic purposes) We can now define property chains using this 'fake' property, e.g. ObjectProperty: RelProc SubPropertyChain: 'partner in' o isProc o inv('partner in') Details Whether dealing with biotic relations, or protein-protein interactions, we frequently have to deal with the fact that OWL forces us to choose whether model something with an instance of an object property. For example, if protein A interacts with B, this can be represented as a triple / object property assertion a interactsWith b (where a and b are instances) Or ixn rdf:type Interaction ixn has-participant a ixn has-participant b (note: not quite as simple on the class level, the first pattern may need to assert a reciprocal) Both have uses. In RO we take the process representation as being primary and shadow these as relations. Unfortunately, OWL is not expressive enough to properly interconvert between these forms. There is a way to partially express, this but unfortunately it is rather abstruse... Pattern To relationalize a process class P: Create a process (I think this should be property, not process) \"isP\" Manually place isP in the http://purl.obolibrary.org/obo/RO_0002464 'helper' hierarchy. Place as deep as possible Create an object property \"P to\" (e.g. interacts in protein-protein interaction with) Manually place P-to in the object property hierarchy Create a property chain axiom (see below) Declare characteristics (symmetric, transitive) as appropriate Create the inverse property, and declare the inverse. You do not need to create a property chain Property chain: 'subject participant in' o isP o inverse('target participant in') SubPropertyOf P-to Comment from Ramona: I don't know if this works if the subject and target are the same type of entities. In PCO, we need to define classes that have at least two enities of the same type that participate in the same interaction process. The instance model works well for PCO, but it would be nice to have a way to specify classes. Examples TODO - fill in when OntoBee online See also GloBI: (1) Poelen, J. H., Simons, J. D., & Mungall, C. J. (2014). Global Biotic Interactions: An open infrastructure to share and analyze species-interaction datasets. Ecological Informatics, 24, 148\u2013159. doi:10.1016/j.ecoinf.2014.08.005 Drawbacks of OWL pattern complex abstruse outside EL subset of OWL (doesn't work with Elk) Future plans We need a high-level way to define these, and derive OWL patterns from this (e.g. Tawny-OWL) Explore use of rule languages Interaction Subsets We make a subset of RO with every release that is just interaction relations. Subsets of this (e.g. for biotic interactions) can be made on request. http://purl.obolibrary.org/obo/ro/subsets/ro-interaction.owl Open Questions To what extent should a relation hierarchy mirror a process hierarchy? A purist approach would be to always use processes, but it is useful in many applications to have the relational form. It would be overkill to mirror everything. Currently in molecular interactions RO has 'core' activities such as phosphorylation/kinase, uniquitination. E.g. a relation for each molecule or group that could be added or removed. This is open to discussion. External Documentation http://ontologydesignpatterns.org/wiki/Submissions:N-Ary_Relation_Pattern_%28OWL_2%29","title":"Interaction Relations"},{"location":"interaction-relations/#introduction","text":"We frequently want interaction relations to 'shadow' biological process relations. This document describes our current implementation for this. It can be useful to have relations that are shortcuts for more detailed modeling using processes. For example, to model two organisms interacting, we may use an 'interaction' process, with the organisms linked via participation relations. We can then subclass the interaction process class to describe different kinds of interaction. It can also be convenient to have relations that 'shortcut' across the process, e.g. x interacts-with y, x phosphorylates y, x hunts y. The way we do this is via the introduction of 'helper properties'. Unfortunately these clog up the ontology from a browsing perspective, but assist with reasoning. The design pattern is documented here. For every interaction process Proc we create as isProc ObjectProperty that is locally reflexive for any instance of Proc, ie Class: Proc SubClassOf: isProc Self ObjectProperty: isProc SubPropertyOf: 'helper process' (the subPropertyOf axiom does not affect the logic, it exists purely for aesthetic purposes) We can now define property chains using this 'fake' property, e.g. ObjectProperty: RelProc SubPropertyChain: 'partner in' o isProc o inv('partner in')","title":"Introduction"},{"location":"interaction-relations/#details","text":"Whether dealing with biotic relations, or protein-protein interactions, we frequently have to deal with the fact that OWL forces us to choose whether model something with an instance of an object property. For example, if protein A interacts with B, this can be represented as a triple / object property assertion a interactsWith b (where a and b are instances) Or ixn rdf:type Interaction ixn has-participant a ixn has-participant b (note: not quite as simple on the class level, the first pattern may need to assert a reciprocal) Both have uses. In RO we take the process representation as being primary and shadow these as relations. Unfortunately, OWL is not expressive enough to properly interconvert between these forms. There is a way to partially express, this but unfortunately it is rather abstruse...","title":"Details"},{"location":"interaction-relations/#pattern","text":"To relationalize a process class P: Create a process (I think this should be property, not process) \"isP\" Manually place isP in the http://purl.obolibrary.org/obo/RO_0002464 'helper' hierarchy. Place as deep as possible Create an object property \"P to\" (e.g. interacts in protein-protein interaction with) Manually place P-to in the object property hierarchy Create a property chain axiom (see below) Declare characteristics (symmetric, transitive) as appropriate Create the inverse property, and declare the inverse. You do not need to create a property chain Property chain: 'subject participant in' o isP o inverse('target participant in') SubPropertyOf P-to Comment from Ramona: I don't know if this works if the subject and target are the same type of entities. In PCO, we need to define classes that have at least two enities of the same type that participate in the same interaction process. The instance model works well for PCO, but it would be nice to have a way to specify classes.","title":"Pattern"},{"location":"interaction-relations/#examples","text":"TODO - fill in when OntoBee online See also GloBI: (1) Poelen, J. H., Simons, J. D., & Mungall, C. J. (2014). Global Biotic Interactions: An open infrastructure to share and analyze species-interaction datasets. Ecological Informatics, 24, 148\u2013159. doi:10.1016/j.ecoinf.2014.08.005","title":"Examples"},{"location":"interaction-relations/#drawbacks-of-owl-pattern","text":"complex abstruse outside EL subset of OWL (doesn't work with Elk)","title":"Drawbacks of OWL pattern"},{"location":"interaction-relations/#future-plans","text":"We need a high-level way to define these, and derive OWL patterns from this (e.g. Tawny-OWL) Explore use of rule languages","title":"Future plans"},{"location":"interaction-relations/#interaction-subsets","text":"We make a subset of RO with every release that is just interaction relations. Subsets of this (e.g. for biotic interactions) can be made on request. http://purl.obolibrary.org/obo/ro/subsets/ro-interaction.owl","title":"Interaction Subsets"},{"location":"interaction-relations/#open-questions","text":"To what extent should a relation hierarchy mirror a process hierarchy? A purist approach would be to always use processes, but it is useful in many applications to have the relational form. It would be overkill to mirror everything. Currently in molecular interactions RO has 'core' activities such as phosphorylation/kinase, uniquitination. E.g. a relation for each molecule or group that could be added or removed. This is open to discussion.","title":"Open Questions"},{"location":"interaction-relations/#external-documentation","text":"http://ontologydesignpatterns.org/wiki/Submissions:N-Ary_Relation_Pattern_%28OWL_2%29","title":"External Documentation"},{"location":"introduction/","text":"Introduction The Relation Ontology (RO) includes over 400 relations covering a variety of domains in the biological, biomedical and environmental sciences, making use of a wide variety of axiom types. This guide is intended to help navigate the structure of the RO and provide assistance with interpreting it. Note that we expect very few users will need to peruse the whole ontology in its entirety. Most people will encounter RO through some subset that is used within another ontology. For example, a user browsing Uberon may see a develops from relationship linking two classes. Clicking on this may lead to a resource such as OntoBee, where more details can be found. In fact many users may not need to be aware of RO at all: the ontology may be used behind the scenes to calculate results. However, we expect some users may have a need to browse the whole ontology. These include ontology developers or data modelers looking to reuse relations. Here some additional guidance may prove useful. Slides The best place to get a general overview of RO is the slides presented at Denver 2018 RO Meeting. How to browse RO In order to fully comprehend RO it is necessary to inspect it using a tool that supports the entirety of the OWL2 language. In practice this means Protege 5, a desktop application. The best web-based way to browse RO is through OntoBee or OLS. However, RO sometimes uses constructs not supported by OntoBee or OLS, and sometimes OntoBee fails to display the full hierarchy. However, OntoBee provides one advantage over Protege: each relation can be browsed in the context of its usage. We recommend use of Protege, sometimes complemented by OntoBee. For Protege, like all OBO ontologies, the ontology should be accessed via its purl, i.e. http://purl.obolibrary.org/obo/ro.owl (or if you want to see the bleeding edge version you can check out this repo and use ro-edit.owl)","title":"Introduction"},{"location":"introduction/#introduction","text":"The Relation Ontology (RO) includes over 400 relations covering a variety of domains in the biological, biomedical and environmental sciences, making use of a wide variety of axiom types. This guide is intended to help navigate the structure of the RO and provide assistance with interpreting it. Note that we expect very few users will need to peruse the whole ontology in its entirety. Most people will encounter RO through some subset that is used within another ontology. For example, a user browsing Uberon may see a develops from relationship linking two classes. Clicking on this may lead to a resource such as OntoBee, where more details can be found. In fact many users may not need to be aware of RO at all: the ontology may be used behind the scenes to calculate results. However, we expect some users may have a need to browse the whole ontology. These include ontology developers or data modelers looking to reuse relations. Here some additional guidance may prove useful.","title":"Introduction"},{"location":"introduction/#slides","text":"The best place to get a general overview of RO is the slides presented at Denver 2018 RO Meeting.","title":"Slides"},{"location":"introduction/#how-to-browse-ro","text":"In order to fully comprehend RO it is necessary to inspect it using a tool that supports the entirety of the OWL2 language. In practice this means Protege 5, a desktop application. The best web-based way to browse RO is through OntoBee or OLS. However, RO sometimes uses constructs not supported by OntoBee or OLS, and sometimes OntoBee fails to display the full hierarchy. However, OntoBee provides one advantage over Protege: each relation can be browsed in the context of its usage. We recommend use of Protege, sometimes complemented by OntoBee. For Protege, like all OBO ontologies, the ontology should be accessed via its purl, i.e. http://purl.obolibrary.org/obo/ro.owl (or if you want to see the bleeding edge version you can check out this repo and use ro-edit.owl)","title":"How to browse RO"},{"location":"mappings/","text":"Introduction We curate mappings to other resources. The current set of mappings can be found in the source directory on github: src/mappings This is an active area! See issue 426 for the latest SIO Mappings The Semanticscience Integrated Ontology ( SIO ) provides a simple, integrated ontology of types and relations for rich description of objects, processes and their attributes. We maintain a set of equivalence axioms connecting SIO and RO object properties here: http://purl.obolibrary.org/obo/ro/bridge/sio-ro-bridge.owl The set may not be complete - requests for additions welcome on the RO tracker. Differences between RO and SIO relations The main difference between SIO relations and RO is that RO uses BFO as an upper level ontology. However, RO generally uses a fairly high level largely uncontroversial subset of BFO. The axioms linking to BFO are in a separate imported ontology that could be swapped out if need be. See ROAndBFO for more details BioTop Mappings Wikidata Mappings","title":"mappings"},{"location":"mappings/#introduction","text":"We curate mappings to other resources. The current set of mappings can be found in the source directory on github: src/mappings This is an active area! See issue 426 for the latest","title":"Introduction"},{"location":"mappings/#sio-mappings","text":"The Semanticscience Integrated Ontology ( SIO ) provides a simple, integrated ontology of types and relations for rich description of objects, processes and their attributes. We maintain a set of equivalence axioms connecting SIO and RO object properties here: http://purl.obolibrary.org/obo/ro/bridge/sio-ro-bridge.owl The set may not be complete - requests for additions welcome on the RO tracker.","title":"SIO Mappings"},{"location":"mappings/#differences-between-ro-and-sio-relations","text":"The main difference between SIO relations and RO is that RO uses BFO as an upper level ontology. However, RO generally uses a fairly high level largely uncontroversial subset of BFO. The axioms linking to BFO are in a separate imported ontology that could be swapped out if need be. See ROAndBFO for more details","title":"Differences between RO and SIO relations"},{"location":"mappings/#biotop-mappings","text":"","title":"BioTop Mappings"},{"location":"mappings/#wikidata-mappings","text":"","title":"Wikidata Mappings"},{"location":"modules/","text":"Introduction Organization of Relations into Domain Modules One of the first things a user may notice on browsing RO is it contains a number of highly specific relations particular to sub-domains of science. This can be disconcerting, especially as (for logical reasons), the hierarchies can be mingled. For example, sub-relations of generic relations 'part of' or 'precedes' include specific neuroanatomical relations mixed with environmental relations. In general, typical users would not be exposed to this variety: a neuroanatomist should consume a RO module intended specifically for neuroanatomy. This section deals with how RO is organized into domains, and how these modules are extracted. Imports RO imports a handful of portions of other ontologies, primarily in order to specify domain and range constraints. In practice, some external ontologies are not properly imported: portions of the ontologies are copied directly into RO. This is something we will resolve in future (TODO tracker link). RO uses BFO classes as an upper level ontology; this is imported from the RO-core module (next section): We currently support two overlapping mechanisms to partition RO into modules according to application or domain. Grouping relations Subsets Grouping relations are OPs (Object Properties) that form the root of a property hierarchy including the desired properties. For example, 'developmentally related to' (http://purl.obolibrary.org/obo/RO_0002324) groups all OPs used to specify developmental relationships between two structures. All such grouping relations should be tagged with a 'curator note' property describing the intent of the grouping, and warning not to use the OP in logical assertions. There are some objections to grouping OPs. Philosophically there are objections that the OP does not represent a true relationship in the world. However, in practice there are no negative consequences of this philosophical infelicity - the OP can simply be ignored. A more serious objection may be that the presence of these relations can slow down reasoning. If this turns out to be a problem we may find another strategy. Despite these objections, grouping relations are undeniably convenient for browsing in an ontology browser like Protege. With the grouping strategy, all subproperties are included in the group. Sometimes it is desirable to cherry pick certain OPs independently of the subProperty hierarchy. Here we explicitly assert membership in a group. Currently this is done using the 'in subset' AP (AnnotationProperty) from the OiO vocabulary. This may be changed to IAO in future, but for now use of this vocabulary has advantages for mapping to obo format and making use of OORT to build releases - subset files are generated as part of the release process. Currently we only have a single subset, ro-eco, but we will add more later, e.g. for RONeuro . One possibility is to have an editor in charge of the content of each module (or at least representing a community of stakeholders). The current version of RO includes both general and specific relations from multiple domains. This is not ideal for many users, who typically require a small subset of these. Dividing into domain-specific modules One approach would be to divide the RO into a collection of domain-specific modules - for each ro-neuro, ro-developmental-biology, etc. These modules could import one another where appropriate, and a parent ro ontology could import everything. We decided against this at this stage, since it will difficult to tell a-priori which were sensible divisions. There are many ways to partition into mutually exclusive sets - by upper level (e.g. process-process relations vs process-continuant) or by domain. Many domains overlap. We may still pre-modularize the relations at some stage in the future, but for now they are organized as a single ontology (or rather as two: with the core relations in BFO and derived and domain specific relations in RO) Extracting Modules As the RO is not modularized in advanced, it would be useful for users to have ways to extract the modules they need. Automatic Module Extraction There are a number of ways to automatically extract a module from an ontology - the OWLAPI implements some of these. You can use the OWLTools command line facility to access the OWLAPI and it's modularization capabilities. Using 'develops from' as a seed using the TOP strategy: owltools ro.owl --extract-module -m TOP 'develops from' -o file://`pwd`/ro-subset-part-of.owl Using 'part of' and 'has part' and all their descendant relations: owltools ro.owl --extract-module -m STAR 'has part' 'part of' -o file://`pwd`/ro-subset-part-of.owl Getting the right module requires an understanding of the modularization algorithm which is non-trivial - particularly where this interacts with ShortcutRelations - in future we will provide a more intuitive high-level modularization capability. Manual Module Extraction Another method is to manually take the properties and/or related axioms one requires and copy them into the working ontology. This technique is not ideal, but the operation is relatively infrequent since most ontologies do not use large numbers of relations. This is the method that has been used in practice for GO, the drosophila anatomy, Uberon, etc. See OBOFormatUsersGuide for details","title":"Modules Overview"},{"location":"modules/#introduction","text":"","title":"Introduction"},{"location":"modules/#organization-of-relations-into-domain-modules","text":"One of the first things a user may notice on browsing RO is it contains a number of highly specific relations particular to sub-domains of science. This can be disconcerting, especially as (for logical reasons), the hierarchies can be mingled. For example, sub-relations of generic relations 'part of' or 'precedes' include specific neuroanatomical relations mixed with environmental relations. In general, typical users would not be exposed to this variety: a neuroanatomist should consume a RO module intended specifically for neuroanatomy. This section deals with how RO is organized into domains, and how these modules are extracted.","title":"Organization of Relations into Domain Modules"},{"location":"modules/#imports","text":"RO imports a handful of portions of other ontologies, primarily in order to specify domain and range constraints. In practice, some external ontologies are not properly imported: portions of the ontologies are copied directly into RO. This is something we will resolve in future (TODO tracker link). RO uses BFO classes as an upper level ontology; this is imported from the RO-core module (next section): We currently support two overlapping mechanisms to partition RO into modules according to application or domain. Grouping relations Subsets Grouping relations are OPs (Object Properties) that form the root of a property hierarchy including the desired properties. For example, 'developmentally related to' (http://purl.obolibrary.org/obo/RO_0002324) groups all OPs used to specify developmental relationships between two structures. All such grouping relations should be tagged with a 'curator note' property describing the intent of the grouping, and warning not to use the OP in logical assertions. There are some objections to grouping OPs. Philosophically there are objections that the OP does not represent a true relationship in the world. However, in practice there are no negative consequences of this philosophical infelicity - the OP can simply be ignored. A more serious objection may be that the presence of these relations can slow down reasoning. If this turns out to be a problem we may find another strategy. Despite these objections, grouping relations are undeniably convenient for browsing in an ontology browser like Protege. With the grouping strategy, all subproperties are included in the group. Sometimes it is desirable to cherry pick certain OPs independently of the subProperty hierarchy. Here we explicitly assert membership in a group. Currently this is done using the 'in subset' AP (AnnotationProperty) from the OiO vocabulary. This may be changed to IAO in future, but for now use of this vocabulary has advantages for mapping to obo format and making use of OORT to build releases - subset files are generated as part of the release process. Currently we only have a single subset, ro-eco, but we will add more later, e.g. for RONeuro . One possibility is to have an editor in charge of the content of each module (or at least representing a community of stakeholders). The current version of RO includes both general and specific relations from multiple domains. This is not ideal for many users, who typically require a small subset of these.","title":"Imports"},{"location":"modules/#dividing-into-domain-specific-modules","text":"One approach would be to divide the RO into a collection of domain-specific modules - for each ro-neuro, ro-developmental-biology, etc. These modules could import one another where appropriate, and a parent ro ontology could import everything. We decided against this at this stage, since it will difficult to tell a-priori which were sensible divisions. There are many ways to partition into mutually exclusive sets - by upper level (e.g. process-process relations vs process-continuant) or by domain. Many domains overlap. We may still pre-modularize the relations at some stage in the future, but for now they are organized as a single ontology (or rather as two: with the core relations in BFO and derived and domain specific relations in RO)","title":"Dividing into domain-specific modules"},{"location":"modules/#extracting-modules","text":"As the RO is not modularized in advanced, it would be useful for users to have ways to extract the modules they need.","title":"Extracting Modules"},{"location":"modules/#automatic-module-extraction","text":"There are a number of ways to automatically extract a module from an ontology - the OWLAPI implements some of these. You can use the OWLTools command line facility to access the OWLAPI and it's modularization capabilities. Using 'develops from' as a seed using the TOP strategy: owltools ro.owl --extract-module -m TOP 'develops from' -o file://`pwd`/ro-subset-part-of.owl Using 'part of' and 'has part' and all their descendant relations: owltools ro.owl --extract-module -m STAR 'has part' 'part of' -o file://`pwd`/ro-subset-part-of.owl Getting the right module requires an understanding of the modularization algorithm which is non-trivial - particularly where this interacts with ShortcutRelations - in future we will provide a more intuitive high-level modularization capability.","title":"Automatic Module Extraction"},{"location":"modules/#manual-module-extraction","text":"Another method is to manually take the properties and/or related axioms one requires and copy them into the working ontology. This technique is not ideal, but the operation is relatively infrequent since most ontologies do not use large numbers of relations. This is the method that has been used in practice for GO, the drosophila anatomy, Uberon, etc. See OBOFormatUsersGuide for details","title":"Manual Module Extraction"},{"location":"object-properties/","text":"Object Properties An OWL ObjectProperty is a construct for connecting two things in the world - e.g. part_of links my left thumb with my left hand. RO is primarily an ontology of Object Properties. Object Properties vs Relations Sometimes following the RO 2005 paper we use the term \"relation\". In OWL, this largely maps to Object Properties","title":"Object Properties"},{"location":"object-properties/#object-properties","text":"An OWL ObjectProperty is a construct for connecting two things in the world - e.g. part_of links my left thumb with my left hand. RO is primarily an ontology of Object Properties.","title":"Object Properties"},{"location":"object-properties/#object-properties-vs-relations","text":"Sometimes following the RO 2005 paper we use the term \"relation\". In OWL, this largely maps to Object Properties","title":"Object Properties vs Relations"},{"location":"owl/","text":"OWL In order to best understand RO, it helps tremendously to be familiar with OWL2. This advice does not necessarily hold for looking at RO through an application-specific prism: here the best way to view RO will be dictated by the application and the domain. However, when looking at the entire ontology understanding OWL2 will definitely help. At a minimum, it helps to know: How to read ManchesterSyntax The difference between an ObjectProperty and an AnnotationProperty The meaning of Object Property Characteristics, such as 'Transitive' The meaning of Object Property Axiom types, such as SubPropertyOf What a PropertyChain is What it means to import an ontology It also helps to know some of the practices of the OBO Community. For example: naming conventions ID policy and URI structure (also: Identifiers ). Use of the IAO metadata vocabulary Finally, for browsing in Protege, we recommend a tutorial such as the Pizza tutorial . A few additional tips help: Hovering over an axiom reveals its ontology source (RO imports parts of other ontologies) Using a reasoner will show you entailed axioms A colored \"@\" means the axiom has annotations (e.g. provenance of the axiom). Click on the \"@\" to see these Additional guides","title":"OWL Concepts"},{"location":"owl/#owl","text":"In order to best understand RO, it helps tremendously to be familiar with OWL2. This advice does not necessarily hold for looking at RO through an application-specific prism: here the best way to view RO will be dictated by the application and the domain. However, when looking at the entire ontology understanding OWL2 will definitely help. At a minimum, it helps to know: How to read ManchesterSyntax The difference between an ObjectProperty and an AnnotationProperty The meaning of Object Property Characteristics, such as 'Transitive' The meaning of Object Property Axiom types, such as SubPropertyOf What a PropertyChain is What it means to import an ontology It also helps to know some of the practices of the OBO Community. For example: naming conventions ID policy and URI structure (also: Identifiers ). Use of the IAO metadata vocabulary Finally, for browsing in Protege, we recommend a tutorial such as the Pizza tutorial . A few additional tips help: Hovering over an axiom reveals its ontology source (RO imports parts of other ontologies) Using a reasoner will show you entailed axioms A colored \"@\" means the axiom has annotations (e.g. provenance of the axiom). Click on the \"@\" to see these","title":"OWL"},{"location":"owl/#additional-guides","text":"","title":"Additional guides"},{"location":"process-relations/","text":"Core Process Relations This document walks us through a subset of the relations used in RO for modeling processes Process Classes The most generic conception of process is BFO:0000015 process From BFO/COB. This captures processes in the general sense, as well as the notion of smaller individual \"events\" Some ontologies provide specific subclasses of this: GO:0008150 biological_process COB:0000082 planned process Some key ontologies or ontology branches that represent processes in OBO: The biological process and molecular activity branches of GO GO:0003674 molecular_function -- represents molecular activities GO:0008150 biological_process The planned process branch of OBI The environmental process branch of ENVO ENVO:02500000 environmental system process Behaviors in NBO Core process-to-process relationships Process part-wholes Processes can be disassembled into sub-parts using the standard generic part-of/has-part relations in RO: BFO:0000050 part of BFO:0000051 has part These are inverses (please read the OWL intro to avoid common misconceptions about inverses) Note that these are generic relations that can also be used for material entities and other kinds of continuants. RO includes axioms that prevent partonomic crossings between these bipartite graphs. This means if you try and include an axiom: EGFR-Protein part-of EGFR-Pathway And these are subclasses of protein and biological process respectively, then you will get an unsatisfiable class when reasoning using a standard OWL reasoner (we encoded these in such a way these issues are revealed even when using performant reasoners like Elk). that RO also provides more specific relations: RO:0002012 occurent part of However, be very careful using these, they are in some sense incompatible with the generic relations. This is because in OWL it is difficult to \"infer downwards\" a relation hierarchy. For this reason, we recommend using the generic relation, particularly when expressing logical definitions. It can help to think of processes as \"4D entities\" when mentally reasoning about parthood. Part-of includes both cases where one process is a \"temporal slice\" of another (e.g. execution phase of aptoptosis is part of apoptosis) and a \"3D slice\". Starts and ends The part relations have two sub-relations to indicate which processes start or end a process: BFO:0000050 part of RO:0002223 starts RO:0002229 ends BFO:0000051 has part RO:0002224 starts with RO:0002230 ends with Note these two hierarchies are inverses of each other. In the above indentation indicates subPropertyOf, i.e. the more specific relation entails the more general. If S starts P, then S is necessarily a part of P. the meaning of these can best be understood thinking in terms of a linear chain of processes. For example, the following simplification of a canonical life cycle of an organism, taken from Uberon: <----- life cycle of an organism -------------------> [zygote stage][2-cell stage] ... [adult stage][death] In this conceptualization, the life cycle starts-with the zygote stage, and ends-with the death stage. Start and end relationship types can be very useful for design patterns for processes. For example, in GO, signaling pathways can be defined by the initiating molecular activity. In RO, all processes are considered to have starts and ends, even if we don't know them. Some processes may have fuzzy temporal boundaries, just as anatomical structures do. We can build some of this fuzziness into class descriptions, but the understanding is that instances always have a start and end. Overlaps As with material entities, part-of and has-part both imply overlaps RO:0002131 overlaps BFO:0000050 part of BFO:0000051 has part This may seem unintuitive at first, but makes sense as in RO (and standard mereology) \"overlaps\" means at least one part in common, and includes both \"proper overlaps\" as well as part-of, has-part, and sharing the identical block of space time. Linking processes to locations in which they occur the occurs in relation links processes to material entities (or immaterial ones, such as anatomical spaces) in which they occur BFO:0000066 occurs in RO includes a property-chain : occurs-in o part-of -> occurs-in i.e. if a process occurs in a location L1, and L1 is part-of L2, then that process also occurs in L2. For example, if a chemical reaction is happening in the lysosomal lumen, it is also happening in a lysosome, and also in a cell, and if that cell is in an organism, it is happening in that organism etc. For taxon reasoning purposes it is important to understand that this may cross organism boundaries, e.g. for symbionts inside a host. Process-participation relationships Note that this section is a little wordier, as we are still working through some of the issues raised. Participation RO includes a very general participation relation and its inverse RO:0000056 participates in RO:0000057 has participant these are often too general to be used to assert information directly. For this reason, we include sub-relations that indicate what the role of the partipant is in the relationship. That are different ways to slice and dice participants, but one of the most useful patterns is the IOA triad: Input-Output-Agent triad In this conceptualization, processes have participants that are broken down as to whether they are \"agents\" or \"acted upon\". The participants that are acted upon can be further broken down into inputs and outputs. We can think of the role classification as: agent acted upon input output This framework is useful for thinking about a number of different kinds of processes, both in the life sciences, and outside: chemical reactions, where the \"agent\" is the catalyst molecule industrial processes that refine raw materials into processes materials evolved biological processes such as biosynthesis and catabolism that are coordinated by the activities of gene products environmental processes such as erosion of geographic features over time, through the actions of other processes e.g. wind cooking a meal from ingredients In implementing this in RO there are a number of different choices: Do the participants have to be material entities? developmental process may have non-material entities such as cavities as inputs and outputs information processes may have information entities as inputs or outputs some processes may be conceived of in terms of changing characteristics - e.g. in changing the state or structure of an entity Does the input have to be present at the start of a process, and the output at the end? e.g. a biosynthetic process may have \"intermediate inputs\", chemicals that are fed in to a reaction in the middle Do particant relations propagate up or down the partonomy of the participants? if a manufacturing process makes a car, are the parts of the car also inputs? If a protein complex is the \"agent\" in a reaction, can the protein parts also be agents? Is anything consumed by a process an input, and anything produced an output? are by-products outputs? many biological processes produce/consume ADP/ATP, are these considered inputs/outputs, even if that is not the \"focus\" of the process? There are many valid ways to slice-and-dice this. RO implements this as follows: RO:0000057 has participant AGENT RELATIONS RO:0002333 enabled by NON-AGENT RELATIONS RO:0002233 has input RO:0004009 has primary input RO:0002234 has output RO:0004008 has primary output Participation is then subdivided into agent and non-agent relations. (At this time there is not an actual grouping relation in RO but we show a grouping for illustrative purposes in the above). Non-agent relations are divided into inputs and outputs, and inputs/outputs can be further specified as being \"primary\", which is elucidated below. We are only showing a slice of the hierarchy, for simplicity. There is also a parallel set of inverses, not shown. Note that it is incorrect to assume the hierarchy aboves implies either disjointness or exhaustiveness. Participation axioms Walking from the root, the most general notion is one of participation . Note this has the following property-chain axiom: 'has part' o 'has participant' SubPropertyOf: 'has participant' This means that participants of part of a process are necessarily participants in the process: participants in the execution phase of apoptosis are also participants in apoptosis if a process of preparing food includes both chopping of vegetables as well as cooking, then participants in the chopping are participants in the overall process note there is no \"bottoming out\" to this chain. These particpants are also participants in the organisms' life and in the life of the universe Has participant also has constraining axioms: Domain: BFO:0000003 occurrent Range: BFO:0000002 continuant These are very high level BFO concepts. \"occurrent\" includes processes and other process-like things. \"continuant\" includes material entities (atoms, molecules, cellular and anatomical structures, organisms, planets) as well as immaterial (spaces and holes) and also characteristics (qualities, roles, states, functions, and information). Note that the core sub-relations above do not further constrain the range This means the following are consistent with the domain/range constraints: the process of running a computer program that has information as inputs and outputs a developmental process that has input two holes and has output one (i.e by eliminating a septum) a cellular process that has as input one state and output another state Individual ontologies may constrain usage further, but RO itself is permissive with these relations, allowing for a variety of scenarios. However, the following are not permitted: a process with another process as participant (instead use a different relation, such as a parthood or regulation relation) a material entity having a participant Agents RO:0000057 has participant AGENT RELATIONS RO:0002333 enabled by The first level divides participants into agent vs non-agent. See the original RO paper for discussion of has-agent. An agent can be thought of a participant that \"carries out\" a process. It may seem unusual to ascribe \"purpose\" in this way to non-sentient participants in a cellular process, for a discussion see the chapter on Function from the GO handbook . Even for processes that are neither evolved nor goal-driven such as earthquakes or natural erosion of coastlines, it can be useful to divide the participants into \"drivers\" and \"driven\". Currently the main agent relation is \"enabled by\", which is used by the GO for relating gene products and complexes to the molecular activities they catalyze, but is not restricted to pathway steps. See the GO-CAM paper for further elucidation on GO's usage. Enabled-by should only be used for participants that carry out the whole process for reactions, the molecule that catalyzes the reaction for a multi-reaction process with each step carried out by a different catalyst, the catalysts are not considered to enable the whole process if a complex carries out a process, then the individual complex components cannot do this unaided, then they are not considered enablers this case you can use a weaker relation: RO:0002326 contributes to Participants that are acted upon RO:0000057 has participant NON-AGENT RELATIONS RO:0002233 has input RO:0002234 has output As currently modeled, for a participant to be an input, it must: be present at the start of the process be modified (including being broken down or destroyed) by the process For a participant to be an output, it must: be present at the end of the process not be present in the same state at the start of the process Although somewhat restrictive, this lumps together primary and secondary input/outputs. Consider a protein phosphorylation process: protein + ATP => a phosphoprotein + ADP With the hierarchy above, the two inputs (the protein and ATP) do not have distinguished roles, neither do the two outputs (the protein and ADP). While this is sufficient for a purely biochemical account, if we look instead from the perspectibe of evolved function, and the parts we care about from a signaling pathway perspective, we might want to model this as the kinase gene product/complex carrying out a process that is acting on the protein. RO:0004009 has primary input RO:0004008 has primary output The definitions primary input/output refer to the \"goal\" of the process, but this should not be understood to be reflecting some sentient goal (see PMID:27812932 ) OBI input/output relations Work is ongoing to reconcile the relations has-specified-input and has-specified-output in OBI with RO, see the tracker for details Other process relations The summary above is intended to describe some of the key ways to model processes using RO design patterns. It is not exhaustive. Not covered here: causal relations between processes, including regulation patterns that describe how processes realize realizables","title":"Process relations"},{"location":"process-relations/#core-process-relations","text":"This document walks us through a subset of the relations used in RO for modeling processes","title":"Core Process Relations"},{"location":"process-relations/#process-classes","text":"The most generic conception of process is BFO:0000015 process From BFO/COB. This captures processes in the general sense, as well as the notion of smaller individual \"events\" Some ontologies provide specific subclasses of this: GO:0008150 biological_process COB:0000082 planned process Some key ontologies or ontology branches that represent processes in OBO: The biological process and molecular activity branches of GO GO:0003674 molecular_function -- represents molecular activities GO:0008150 biological_process The planned process branch of OBI The environmental process branch of ENVO ENVO:02500000 environmental system process Behaviors in NBO","title":"Process Classes"},{"location":"process-relations/#core-process-to-process-relationships","text":"","title":"Core process-to-process relationships"},{"location":"process-relations/#process-part-wholes","text":"Processes can be disassembled into sub-parts using the standard generic part-of/has-part relations in RO: BFO:0000050 part of BFO:0000051 has part These are inverses (please read the OWL intro to avoid common misconceptions about inverses) Note that these are generic relations that can also be used for material entities and other kinds of continuants. RO includes axioms that prevent partonomic crossings between these bipartite graphs. This means if you try and include an axiom: EGFR-Protein part-of EGFR-Pathway And these are subclasses of protein and biological process respectively, then you will get an unsatisfiable class when reasoning using a standard OWL reasoner (we encoded these in such a way these issues are revealed even when using performant reasoners like Elk). that RO also provides more specific relations: RO:0002012 occurent part of However, be very careful using these, they are in some sense incompatible with the generic relations. This is because in OWL it is difficult to \"infer downwards\" a relation hierarchy. For this reason, we recommend using the generic relation, particularly when expressing logical definitions. It can help to think of processes as \"4D entities\" when mentally reasoning about parthood. Part-of includes both cases where one process is a \"temporal slice\" of another (e.g. execution phase of aptoptosis is part of apoptosis) and a \"3D slice\".","title":"Process part-wholes"},{"location":"process-relations/#starts-and-ends","text":"The part relations have two sub-relations to indicate which processes start or end a process: BFO:0000050 part of RO:0002223 starts RO:0002229 ends BFO:0000051 has part RO:0002224 starts with RO:0002230 ends with Note these two hierarchies are inverses of each other. In the above indentation indicates subPropertyOf, i.e. the more specific relation entails the more general. If S starts P, then S is necessarily a part of P. the meaning of these can best be understood thinking in terms of a linear chain of processes. For example, the following simplification of a canonical life cycle of an organism, taken from Uberon: <----- life cycle of an organism -------------------> [zygote stage][2-cell stage] ... [adult stage][death] In this conceptualization, the life cycle starts-with the zygote stage, and ends-with the death stage. Start and end relationship types can be very useful for design patterns for processes. For example, in GO, signaling pathways can be defined by the initiating molecular activity. In RO, all processes are considered to have starts and ends, even if we don't know them. Some processes may have fuzzy temporal boundaries, just as anatomical structures do. We can build some of this fuzziness into class descriptions, but the understanding is that instances always have a start and end.","title":"Starts and ends"},{"location":"process-relations/#overlaps","text":"As with material entities, part-of and has-part both imply overlaps RO:0002131 overlaps BFO:0000050 part of BFO:0000051 has part This may seem unintuitive at first, but makes sense as in RO (and standard mereology) \"overlaps\" means at least one part in common, and includes both \"proper overlaps\" as well as part-of, has-part, and sharing the identical block of space time.","title":"Overlaps"},{"location":"process-relations/#linking-processes-to-locations-in-which-they-occur","text":"the occurs in relation links processes to material entities (or immaterial ones, such as anatomical spaces) in which they occur BFO:0000066 occurs in RO includes a property-chain : occurs-in o part-of -> occurs-in i.e. if a process occurs in a location L1, and L1 is part-of L2, then that process also occurs in L2. For example, if a chemical reaction is happening in the lysosomal lumen, it is also happening in a lysosome, and also in a cell, and if that cell is in an organism, it is happening in that organism etc. For taxon reasoning purposes it is important to understand that this may cross organism boundaries, e.g. for symbionts inside a host.","title":"Linking processes to locations in which they occur"},{"location":"process-relations/#process-participation-relationships","text":"Note that this section is a little wordier, as we are still working through some of the issues raised.","title":"Process-participation relationships"},{"location":"process-relations/#participation","text":"RO includes a very general participation relation and its inverse RO:0000056 participates in RO:0000057 has participant these are often too general to be used to assert information directly. For this reason, we include sub-relations that indicate what the role of the partipant is in the relationship. That are different ways to slice and dice participants, but one of the most useful patterns is the IOA triad:","title":"Participation"},{"location":"process-relations/#input-output-agent-triad","text":"In this conceptualization, processes have participants that are broken down as to whether they are \"agents\" or \"acted upon\". The participants that are acted upon can be further broken down into inputs and outputs. We can think of the role classification as: agent acted upon input output This framework is useful for thinking about a number of different kinds of processes, both in the life sciences, and outside: chemical reactions, where the \"agent\" is the catalyst molecule industrial processes that refine raw materials into processes materials evolved biological processes such as biosynthesis and catabolism that are coordinated by the activities of gene products environmental processes such as erosion of geographic features over time, through the actions of other processes e.g. wind cooking a meal from ingredients In implementing this in RO there are a number of different choices: Do the participants have to be material entities? developmental process may have non-material entities such as cavities as inputs and outputs information processes may have information entities as inputs or outputs some processes may be conceived of in terms of changing characteristics - e.g. in changing the state or structure of an entity Does the input have to be present at the start of a process, and the output at the end? e.g. a biosynthetic process may have \"intermediate inputs\", chemicals that are fed in to a reaction in the middle Do particant relations propagate up or down the partonomy of the participants? if a manufacturing process makes a car, are the parts of the car also inputs? If a protein complex is the \"agent\" in a reaction, can the protein parts also be agents? Is anything consumed by a process an input, and anything produced an output? are by-products outputs? many biological processes produce/consume ADP/ATP, are these considered inputs/outputs, even if that is not the \"focus\" of the process? There are many valid ways to slice-and-dice this. RO implements this as follows: RO:0000057 has participant AGENT RELATIONS RO:0002333 enabled by NON-AGENT RELATIONS RO:0002233 has input RO:0004009 has primary input RO:0002234 has output RO:0004008 has primary output Participation is then subdivided into agent and non-agent relations. (At this time there is not an actual grouping relation in RO but we show a grouping for illustrative purposes in the above). Non-agent relations are divided into inputs and outputs, and inputs/outputs can be further specified as being \"primary\", which is elucidated below. We are only showing a slice of the hierarchy, for simplicity. There is also a parallel set of inverses, not shown. Note that it is incorrect to assume the hierarchy aboves implies either disjointness or exhaustiveness.","title":"Input-Output-Agent triad"},{"location":"process-relations/#participation-axioms","text":"Walking from the root, the most general notion is one of participation . Note this has the following property-chain axiom: 'has part' o 'has participant' SubPropertyOf: 'has participant' This means that participants of part of a process are necessarily participants in the process: participants in the execution phase of apoptosis are also participants in apoptosis if a process of preparing food includes both chopping of vegetables as well as cooking, then participants in the chopping are participants in the overall process note there is no \"bottoming out\" to this chain. These particpants are also participants in the organisms' life and in the life of the universe Has participant also has constraining axioms: Domain: BFO:0000003 occurrent Range: BFO:0000002 continuant These are very high level BFO concepts. \"occurrent\" includes processes and other process-like things. \"continuant\" includes material entities (atoms, molecules, cellular and anatomical structures, organisms, planets) as well as immaterial (spaces and holes) and also characteristics (qualities, roles, states, functions, and information). Note that the core sub-relations above do not further constrain the range This means the following are consistent with the domain/range constraints: the process of running a computer program that has information as inputs and outputs a developmental process that has input two holes and has output one (i.e by eliminating a septum) a cellular process that has as input one state and output another state Individual ontologies may constrain usage further, but RO itself is permissive with these relations, allowing for a variety of scenarios. However, the following are not permitted: a process with another process as participant (instead use a different relation, such as a parthood or regulation relation) a material entity having a participant","title":"Participation axioms"},{"location":"process-relations/#agents","text":"RO:0000057 has participant AGENT RELATIONS RO:0002333 enabled by The first level divides participants into agent vs non-agent. See the original RO paper for discussion of has-agent. An agent can be thought of a participant that \"carries out\" a process. It may seem unusual to ascribe \"purpose\" in this way to non-sentient participants in a cellular process, for a discussion see the chapter on Function from the GO handbook . Even for processes that are neither evolved nor goal-driven such as earthquakes or natural erosion of coastlines, it can be useful to divide the participants into \"drivers\" and \"driven\". Currently the main agent relation is \"enabled by\", which is used by the GO for relating gene products and complexes to the molecular activities they catalyze, but is not restricted to pathway steps. See the GO-CAM paper for further elucidation on GO's usage. Enabled-by should only be used for participants that carry out the whole process for reactions, the molecule that catalyzes the reaction for a multi-reaction process with each step carried out by a different catalyst, the catalysts are not considered to enable the whole process if a complex carries out a process, then the individual complex components cannot do this unaided, then they are not considered enablers this case you can use a weaker relation: RO:0002326 contributes to","title":"Agents"},{"location":"process-relations/#participants-that-are-acted-upon","text":"RO:0000057 has participant NON-AGENT RELATIONS RO:0002233 has input RO:0002234 has output As currently modeled, for a participant to be an input, it must: be present at the start of the process be modified (including being broken down or destroyed) by the process For a participant to be an output, it must: be present at the end of the process not be present in the same state at the start of the process Although somewhat restrictive, this lumps together primary and secondary input/outputs. Consider a protein phosphorylation process: protein + ATP => a phosphoprotein + ADP With the hierarchy above, the two inputs (the protein and ATP) do not have distinguished roles, neither do the two outputs (the protein and ADP). While this is sufficient for a purely biochemical account, if we look instead from the perspectibe of evolved function, and the parts we care about from a signaling pathway perspective, we might want to model this as the kinase gene product/complex carrying out a process that is acting on the protein. RO:0004009 has primary input RO:0004008 has primary output The definitions primary input/output refer to the \"goal\" of the process, but this should not be understood to be reflecting some sentient goal (see PMID:27812932 )","title":"Participants that are acted upon"},{"location":"process-relations/#obi-inputoutput-relations","text":"Work is ongoing to reconcile the relations has-specified-input and has-specified-output in OBI with RO, see the tracker for details","title":"OBI input/output relations"},{"location":"process-relations/#other-process-relations","text":"The summary above is intended to describe some of the key ways to model processes using RO design patterns. It is not exhaustive. Not covered here: causal relations between processes, including regulation patterns that describe how processes realize realizables","title":"Other process relations"},{"location":"property-chains/","text":"Property Chains Property chains are rules written like this: R <- S o T Here the 'o' is the composition operator. This means that an 'S' edge followed by a 'T' edge implies an R edge spanning both. In rule-oriented terms: IF x S y AND y T z THEN x R z Note the converse is not implied. Property Chains in RO RO makes frequent use of property chains. See ROGuide for more details","title":"Property Chains"},{"location":"property-chains/#property-chains","text":"Property chains are rules written like this: R <- S o T Here the 'o' is the composition operator. This means that an 'S' edge followed by a 'T' edge implies an R edge spanning both. In rule-oriented terms: IF x S y AND y T z THEN x R z Note the converse is not implied.","title":"Property Chains"},{"location":"property-chains/#property-chains-in-ro","text":"RO makes frequent use of property chains. See ROGuide for more details","title":"Property Chains in RO"},{"location":"quickstart/","text":"Quick start For curators RO is a large ontology covering both generic relations, and relations specific to various domains such as ecology or neuroscience. It is unlikely you will need all of RO. For a given task, there may be a specific subset defined. For example: For use in relating gene products to GO terms, the GPAD standard defines a set of allowed relations For use in causal interaction graphs, the MI2CAST standard provides recommendations of sets to use For individual ontologies, Design Patterns will show which relations can be used for different types of terms In these cases, it is often best to start by looking at the more specific documentation. If your curation use case is not covered by an existing standard or ontology, then consult this reference to get a better understanding of RO. We recommend coordinating with others to define a particular subset. One way to start is to describe your use case on the RO tracker. For developers TODO For OWL experts RO is a rich OWL ontology that makes use of many different OWL constructs, as well as SWRL. You may wish to start with the design pattern documentation here. Quick Guide to Basic Concepts Shortcut Relations RO includes a number of macro or shortcut relations. E.g capable of has postynaptic terminal in For more information, see ShortcutRelations Modularization RO combines multiple relations from different biological sub-domains into one ontology. Sometimes these relations are very specialized and of limited use outside that domain. For more on extracting specific modules, see: See modules .","title":"Quickstart"},{"location":"quickstart/#quick-start","text":"","title":"Quick start"},{"location":"quickstart/#for-curators","text":"RO is a large ontology covering both generic relations, and relations specific to various domains such as ecology or neuroscience. It is unlikely you will need all of RO. For a given task, there may be a specific subset defined. For example: For use in relating gene products to GO terms, the GPAD standard defines a set of allowed relations For use in causal interaction graphs, the MI2CAST standard provides recommendations of sets to use For individual ontologies, Design Patterns will show which relations can be used for different types of terms In these cases, it is often best to start by looking at the more specific documentation. If your curation use case is not covered by an existing standard or ontology, then consult this reference to get a better understanding of RO. We recommend coordinating with others to define a particular subset. One way to start is to describe your use case on the RO tracker.","title":"For curators"},{"location":"quickstart/#for-developers","text":"TODO","title":"For developers"},{"location":"quickstart/#for-owl-experts","text":"RO is a rich OWL ontology that makes use of many different OWL constructs, as well as SWRL. You may wish to start with the design pattern documentation here.","title":"For OWL experts"},{"location":"quickstart/#quick-guide-to-basic-concepts","text":"","title":"Quick Guide to Basic Concepts"},{"location":"quickstart/#shortcut-relations","text":"RO includes a number of macro or shortcut relations. E.g capable of has postynaptic terminal in For more information, see ShortcutRelations","title":"Shortcut Relations"},{"location":"quickstart/#modularization","text":"RO combines multiple relations from different biological sub-domains into one ontology. Sometimes these relations are very specialized and of limited use outside that domain. For more on extracting specific modules, see: See modules .","title":"Modularization"},{"location":"reflexivity/","text":"Reflexivity in RO Defining Property Chains involving Reflexivity When defining property chains over R and R2 we typically name this according to the composition and include an axiom: ObjectProperty: {R}_{R2} SubObjectPropertyOf: R o R2 we may also want to make this a reflexive property chain: ObjectProperty: R SubObjectPropertyOf: {R}_{R2} When this ODP is used, the property chain axiom should be tagged with an is a defining property chain axiom where second argument is reflexive axiom. In this case, the parent relation is a grouping relation for query purposes. Consider: http://purl.obolibrary.org/obo/RO_0002177 'attached to part of' http://purl.obolibrary.org/obo/RO_0002371 'attached to' Consider a ligament or tendon attached to some projection P that is part of a bone B, that is part of the limb skeleton. We may be interested in all attachmed structures for any part of the body, and this named property chain provides a convenient way of querying for it. In all cases of this ODP, the parent property can be safely 'unfolded' away with no loss of information. i.e. expanded to an actual chain with two property expressions or assertions. The placement of the base form as a child of the parent is justified via the local reflexivity of the 2nd argument. Local Reflexivity In many formal treatments of relations, the Reflexivity characteristic is frequently used. For example, in mereology, 'part of' is frequently characterized as reflexive. This can seem confusing when compared with everyday usage (no one typically considers an object to be part of itself). However, it is convenient from the point of view of mathematical formulation. A 'proper R' sub-relation is often introduced, e.g. 'proper part of'. (We typically do not include a 'proper' form of the relation. This is because it inflates the ontology, and complicates reasoning. Also, it does not actually add information or provide real utility or intuition). We rarely if ever declare a relation to be reflexive. Reflexivity is incompatible with domain and range assertions. Consider: ObjectProperty: P Characteristics: Reflexive Domain: C Class: C DisjointWith: D reflexivity of P literally means that every individual in the domain stands in a P relation to itself. This would include any instances of D. However, it an instance of D cannot be the subject of a P relation, hence D is unsatisfiable. This is rarely a concern in formal treatments, where a restricted domain is assumed; however, RO covers all domains so full reflexivity is almost always inappropriate. Instead, here we would make use of a 'local reflexivity' axiom. E.g. ObjectProperty: P Domain: C Class: C DisjointWith: D SubClassOf: P Self In practice we may not have asserted all cases of local reflexivity (TODO: tracker link).","title":"Reflexivity"},{"location":"reflexivity/#reflexivity-in-ro","text":"","title":"Reflexivity in RO"},{"location":"reflexivity/#defining-property-chains-involving-reflexivity","text":"When defining property chains over R and R2 we typically name this according to the composition and include an axiom: ObjectProperty: {R}_{R2} SubObjectPropertyOf: R o R2 we may also want to make this a reflexive property chain: ObjectProperty: R SubObjectPropertyOf: {R}_{R2} When this ODP is used, the property chain axiom should be tagged with an is a defining property chain axiom where second argument is reflexive axiom. In this case, the parent relation is a grouping relation for query purposes. Consider: http://purl.obolibrary.org/obo/RO_0002177 'attached to part of' http://purl.obolibrary.org/obo/RO_0002371 'attached to' Consider a ligament or tendon attached to some projection P that is part of a bone B, that is part of the limb skeleton. We may be interested in all attachmed structures for any part of the body, and this named property chain provides a convenient way of querying for it. In all cases of this ODP, the parent property can be safely 'unfolded' away with no loss of information. i.e. expanded to an actual chain with two property expressions or assertions. The placement of the base form as a child of the parent is justified via the local reflexivity of the 2nd argument.","title":"Defining Property Chains involving Reflexivity"},{"location":"reflexivity/#local-reflexivity","text":"In many formal treatments of relations, the Reflexivity characteristic is frequently used. For example, in mereology, 'part of' is frequently characterized as reflexive. This can seem confusing when compared with everyday usage (no one typically considers an object to be part of itself). However, it is convenient from the point of view of mathematical formulation. A 'proper R' sub-relation is often introduced, e.g. 'proper part of'. (We typically do not include a 'proper' form of the relation. This is because it inflates the ontology, and complicates reasoning. Also, it does not actually add information or provide real utility or intuition). We rarely if ever declare a relation to be reflexive. Reflexivity is incompatible with domain and range assertions. Consider: ObjectProperty: P Characteristics: Reflexive Domain: C Class: C DisjointWith: D reflexivity of P literally means that every individual in the domain stands in a P relation to itself. This would include any instances of D. However, it an instance of D cannot be the subject of a P relation, hence D is unsatisfiable. This is rarely a concern in formal treatments, where a restricted domain is assumed; however, RO covers all domains so full reflexivity is almost always inappropriate. Instead, here we would make use of a 'local reflexivity' axiom. E.g. ObjectProperty: P Domain: C Class: C DisjointWith: D SubClassOf: P Self In practice we may not have asserted all cases of local reflexivity (TODO: tracker link).","title":"Local Reflexivity"},{"location":"ro-and-bfo/","text":"Introduction This page describes the current status of interoperation between RO and BFO Executive Summary RO is independent of BFO. We intend to align the \"core\" relations ( RO Core ) in RO to the greatest extent possible, but there may be differences as RO serves the biological community rather than the philosophical/ontological community. BFO users are welcome to use RO core relations in combination with BFO classes. Note that RO already imports BFO classes and uses these in domain/range constraints. However, RO does not intend to be the arbiter of BFO semantics. For more info on RO-core, see: RO Core RO relations with BFO IDs For historic reasons, RO has made use of a small number of relations with BFO IDs. For example: BFO:0000050 part_of BFO:0000051 has_part It should be noted that these are RO relations, not BFO relations - they are defined in the RO, and will be maintained in the RO. Note that the URIs for these classes resolve to RO, as per agreement with the BFO developers. This should not affect users as you should treat IDs/URIs as opaque. However, it is a frequent source of confusion RO also uses BFO IDs for the following relations BFO_0000062 preceded by BFO_0000063 precedes BFO_0000066 occurs_in Inheres in vs characteristic of We have tried to align the core with BFO reference relations as far as possible, but we opted not to adopt BFO \"inheres in\", and instead use a more general \"characteristic of\" relation that allows qualities to be associated to processes. RO:0000052 -- characteristic of PR 284 -- this pull request includes historic discussion History RO historically use of BFO in two ways: Upper level classes from BFO are used to make constraints such as domain/range on relations RO originally ceded \"core\" relations such as part_of to BFO This plan was conceived in 2010 before the release of BFO2. At the time of writing (March 2013), the current BFO2 proposal is to use so-called 'temporalized relations' such as http://purl.obolibrary.org/obo/BFO_0000137 . At this time RO is not adopting temporalized relations. The views of one of the RO developers (Chris Mungall) is expressed in this critique of BFO2 OWL . The view of all RO developers is not to adopt temporalized relations. Thus RO maintains its own set of core relations, aligned as far as possible with the BFO2 reference, but independent. See temporal-semantics for more details. RO and BFO Classes Note that RO should still be compatible with the classes from BFO. The above relations import ontology imports a set of BFO classes that are a subset of the current BFO2 classes. TODO: resolve processural entity/process distinction","title":"RO and BFO"},{"location":"ro-and-bfo/#introduction","text":"This page describes the current status of interoperation between RO and BFO","title":"Introduction"},{"location":"ro-and-bfo/#executive-summary","text":"RO is independent of BFO. We intend to align the \"core\" relations ( RO Core ) in RO to the greatest extent possible, but there may be differences as RO serves the biological community rather than the philosophical/ontological community. BFO users are welcome to use RO core relations in combination with BFO classes. Note that RO already imports BFO classes and uses these in domain/range constraints. However, RO does not intend to be the arbiter of BFO semantics. For more info on RO-core, see: RO Core","title":"Executive Summary"},{"location":"ro-and-bfo/#ro-relations-with-bfo-ids","text":"For historic reasons, RO has made use of a small number of relations with BFO IDs. For example: BFO:0000050 part_of BFO:0000051 has_part It should be noted that these are RO relations, not BFO relations - they are defined in the RO, and will be maintained in the RO. Note that the URIs for these classes resolve to RO, as per agreement with the BFO developers. This should not affect users as you should treat IDs/URIs as opaque. However, it is a frequent source of confusion RO also uses BFO IDs for the following relations BFO_0000062 preceded by BFO_0000063 precedes BFO_0000066 occurs_in","title":"RO relations with BFO IDs"},{"location":"ro-and-bfo/#inheres-in-vs-characteristic-of","text":"We have tried to align the core with BFO reference relations as far as possible, but we opted not to adopt BFO \"inheres in\", and instead use a more general \"characteristic of\" relation that allows qualities to be associated to processes. RO:0000052 -- characteristic of PR 284 -- this pull request includes historic discussion","title":"Inheres in vs characteristic of"},{"location":"ro-and-bfo/#history","text":"RO historically use of BFO in two ways: Upper level classes from BFO are used to make constraints such as domain/range on relations RO originally ceded \"core\" relations such as part_of to BFO This plan was conceived in 2010 before the release of BFO2. At the time of writing (March 2013), the current BFO2 proposal is to use so-called 'temporalized relations' such as http://purl.obolibrary.org/obo/BFO_0000137 . At this time RO is not adopting temporalized relations. The views of one of the RO developers (Chris Mungall) is expressed in this critique of BFO2 OWL . The view of all RO developers is not to adopt temporalized relations. Thus RO maintains its own set of core relations, aligned as far as possible with the BFO2 reference, but independent. See temporal-semantics for more details.","title":"History"},{"location":"ro-and-bfo/#ro-and-bfo-classes","text":"Note that RO should still be compatible with the classes from BFO. The above relations import ontology imports a set of BFO classes that are a subset of the current BFO2 classes. TODO: resolve processural entity/process distinction","title":"RO and BFO Classes"},{"location":"ro-and-chado/","text":"We have a RO subset that is designed specifically for use in Chado databases. The permanent URL for this is: http://purl.obolibrary.org/obo/ro/subsets/ro-chado.obo This always resolves to the latest version. Permanent URLs are also available for each release, these are of the form: http://purl.obolibrary.org/obo/ro/releases/YYYY-MM-DD/subsets/ro-chado.obo This different from the main releases ro.obo and ro.owl in the following respects: An additional stanza is added for the is_a relation The ontology is guaranteed to have a default-namespace: ro header There are no classes ( [Term] s) in the file For more background, see #68","title":"Chado Databases"},{"location":"ro-and-obo-format/","text":"Introduction This gives instructions on how to use RO in conjunction with ontologies whose source is obo-format. See http://oboformat.org for more information on OBO-Format and its relationship to OWL. Merge vs Import Imports is not well-supported in Obo Edit, so the best strategy is to copy in the portion of the stanza you require from ro.obo Note that you can use a shortcut ID for the relation within the file. For example, GO has: [Typedef] id: occurs_in name: occurs in xref: BFO:0000066 transitive_over: part_of ! part_of This means that this stanza portion: [Term] id: GO:0090144 name: mitochondrial nucleoid organization ... intersection_of: GO:0090143 ! nucleoid organization intersection_of: occurs_in GO:0005739 ! mitochondrion is translated to: Class: obo:GO_0090144 EquivalentTo: GO_0090143 and BFO_0000066 some GO_0005739 The same holds by default for RO IDs. Other URI schemes are possible using the idspace tag See also Identifiers","title":"RO and OBO Format"},{"location":"ro-and-obo-format/#introduction","text":"This gives instructions on how to use RO in conjunction with ontologies whose source is obo-format. See http://oboformat.org for more information on OBO-Format and its relationship to OWL.","title":"Introduction"},{"location":"ro-and-obo-format/#merge-vs-import","text":"Imports is not well-supported in Obo Edit, so the best strategy is to copy in the portion of the stanza you require from ro.obo Note that you can use a shortcut ID for the relation within the file. For example, GO has: [Typedef] id: occurs_in name: occurs in xref: BFO:0000066 transitive_over: part_of ! part_of This means that this stanza portion: [Term] id: GO:0090144 name: mitochondrial nucleoid organization ... intersection_of: GO:0090143 ! nucleoid organization intersection_of: occurs_in GO:0005739 ! mitochondrion is translated to: Class: obo:GO_0090144 EquivalentTo: GO_0090143 and BFO_0000066 some GO_0005739 The same holds by default for RO IDs. Other URI schemes are possible using the idspace tag","title":"Merge vs Import"},{"location":"ro-and-obo-format/#see-also","text":"Identifiers","title":"See also"},{"location":"ro-core/","text":"RO Core RO Core http://purl.obolibrary.org/obo/ro/core.owl is a subset of the full RO. It includes \"core\" relations intended to be domain neutral, and excludes most domain-specific relations (such as the \"habitat of\" relation used in environmental ontologies, or the \"synapsed with\" relation used in neuroanatomical ontologies). Smith 2005 describes the origin of RO Core, with 10 very general relations used by ontologies across the OBO community. These relations are defined in terms of the Basic Formal Ontology (BFO), an upper-level ontology that includes very general terms such as 'entity', 'continuant', 'occurrent', 'material entity', 'process', 'disposition', etc. For instance, the 'has participant' relation holds between an occurrent (e.g. the process of growth of some frog) and a continuant (e.g. the frog itself). See ROAndBFO for more information. RO Core imports a subset of classes from BFO 2.0, defines relations among them, and uses them for domain and range axioms. Every term in RO Core should have a textual definition and examples of usage. Since BFO is an upper-level ontology, not specific to biology, RO Core is also very general. The RO Core OWL file is available as a separate download from http://purl.obolibrary.org/obo/ro/core.owl . A number of OBO ontologies import RO Core specifically, when they do not need the wider range of biological relations provided by RO. Additional Notes RO Core also diverges from BFO in that we do not include the BFO 'inheres in' relation. We instead have a relation characteristic of , which is in some aspects more general that inheres-in (it relaxes range constraints, such that things can be characteristics of processes), and in some aspects more specific than inheres-in (it restricts the relation to be functional). Note that the RO characteristic of used to be called 'inheres in', as it was originally modeled after the RO relation, but was renamed in 2021 to avoid confusion. See this pull request for historic context.","title":"RO Core"},{"location":"ro-core/#ro-core","text":"RO Core http://purl.obolibrary.org/obo/ro/core.owl is a subset of the full RO. It includes \"core\" relations intended to be domain neutral, and excludes most domain-specific relations (such as the \"habitat of\" relation used in environmental ontologies, or the \"synapsed with\" relation used in neuroanatomical ontologies). Smith 2005 describes the origin of RO Core, with 10 very general relations used by ontologies across the OBO community. These relations are defined in terms of the Basic Formal Ontology (BFO), an upper-level ontology that includes very general terms such as 'entity', 'continuant', 'occurrent', 'material entity', 'process', 'disposition', etc. For instance, the 'has participant' relation holds between an occurrent (e.g. the process of growth of some frog) and a continuant (e.g. the frog itself). See ROAndBFO for more information. RO Core imports a subset of classes from BFO 2.0, defines relations among them, and uses them for domain and range axioms. Every term in RO Core should have a textual definition and examples of usage. Since BFO is an upper-level ontology, not specific to biology, RO Core is also very general. The RO Core OWL file is available as a separate download from http://purl.obolibrary.org/obo/ro/core.owl . A number of OBO ontologies import RO Core specifically, when they do not need the wider range of biological relations provided by RO.","title":"RO Core"},{"location":"ro-core/#additional-notes","text":"RO Core also diverges from BFO in that we do not include the BFO 'inheres in' relation. We instead have a relation characteristic of , which is in some aspects more general that inheres-in (it relaxes range constraints, such that things can be characteristics of processes), and in some aspects more specific than inheres-in (it restricts the relation to be functional). Note that the RO characteristic of used to be called 'inheres in', as it was originally modeled after the RO relation, but was renamed in 2021 to avoid confusion. See this pull request for historic context.","title":"Additional Notes"},{"location":"ro-neuro/","text":"The neuro subset of RO can be found at http://purl.obolibrary.org/obo/ro/subsets/ro-neuro.owl For details, see: D Osumi-Sutherland, S Reeve, CJ Mungall, F Neuhaus, A Ruttenberg, GSXE Jefferis, J Douglas Armstrong A strategy for building neuroanatomy ontologies Bioinformatics 28 (9), 1262-1269 http://www.ncbi.nlm.nih.gov/pubmed/22402613 Relations and their axioms (in OWL and CLIF) are summarised in the supplementary material for this paper","title":"RO Neuron"},{"location":"ro-sio-bridge/","text":"Introduction The Semanticscience Integrated Ontology ( SIO ) provides a simple, integrated ontology of types and relations for rich description of objects, processes and their attributes. Details We maintain a set of equivalence axioms connecting SIO and RO object properties here: http://purl.obolibrary.org/obo/ro/bridge/sio-ro-bridge.owl The set may not be complete - requests for additions welcome on the RO tracker. Differences between RO and SIO relations The main difference between SIO relations and RO is that RO uses BFO as an upper level ontology. However, RO generally uses a fairly high level largely uncontroversial subset of BFO. The axioms linking to BFO are in a separate imported ontology that could be swapped out if need be. See ROAndBFO for more details","title":"Introduction #"},{"location":"ro-sio-bridge/#introduction","text":"The Semanticscience Integrated Ontology ( SIO ) provides a simple, integrated ontology of types and relations for rich description of objects, processes and their attributes.","title":"Introduction"},{"location":"ro-sio-bridge/#details","text":"We maintain a set of equivalence axioms connecting SIO and RO object properties here: http://purl.obolibrary.org/obo/ro/bridge/sio-ro-bridge.owl The set may not be complete - requests for additions welcome on the RO tracker.","title":"Details"},{"location":"ro-sio-bridge/#differences-between-ro-and-sio-relations","text":"The main difference between SIO relations and RO is that RO uses BFO as an upper level ontology. However, RO generally uses a fairly high level largely uncontroversial subset of BFO. The axioms linking to BFO are in a separate imported ontology that could be swapped out if need be. See ROAndBFO for more details","title":"Differences between RO and SIO relations"},{"location":"shortcut-relations/","text":"Shortcut Relations Representing complex descriptions using a limited set of relations is possible, but unwieldy and complex. Some formalisms such as OBO and simple graph formalisms require the ontology to a graph with labeled nodes. Shortcut relations can be used in place of multiple relations and classes. Details Shortcut or macro relations are described in section 7 of the oboformat spec , although in fact they are designed primarily as OWL->OWL translations. Examples Implementation Available as part of http://code.google.com/p/oboformat basic reference obo2owl converter Oort the OBO ontology release tool Note that Oort can take OWL ontologies as input. It gives you the option of expanding macros in place (replacement strategy) or generating a separate external ontology of General Class Inclusion (GCI) axioms References Chris Mungall, David Osumi-Sutherland, Alan Ruttenberg Taking shortcuts with OWL using safe macros June 2010","title":"Shortcut Relations"},{"location":"shortcut-relations/#shortcut-relations","text":"Representing complex descriptions using a limited set of relations is possible, but unwieldy and complex. Some formalisms such as OBO and simple graph formalisms require the ontology to a graph with labeled nodes. Shortcut relations can be used in place of multiple relations and classes.","title":"Shortcut Relations"},{"location":"shortcut-relations/#details","text":"Shortcut or macro relations are described in section 7 of the oboformat spec , although in fact they are designed primarily as OWL->OWL translations.","title":"Details"},{"location":"shortcut-relations/#examples","text":"","title":"Examples"},{"location":"shortcut-relations/#implementation","text":"Available as part of http://code.google.com/p/oboformat basic reference obo2owl converter Oort the OBO ontology release tool Note that Oort can take OWL ontologies as input. It gives you the option of expanding macros in place (replacement strategy) or generating a separate external ontology of General Class Inclusion (GCI) axioms","title":"Implementation"},{"location":"shortcut-relations/#references","text":"Chris Mungall, David Osumi-Sutherland, Alan Ruttenberg Taking shortcuts with OWL using safe macros June 2010","title":"References"},{"location":"subsets/","text":"TODO","title":"Subsets"},{"location":"temporal-durations/","text":"TODO","title":"Temporal durations"},{"location":"temporal-semantics/","text":"Introduction Relationships such as 'part_of' can change over time. For example, a cell can be part of the neuroepithelium at one time, and then detached from it at a later time. This is an important consideration in anatomy ontologies . For a detailed treatment, see the original RO paper . Unfortunately the relations in this paper are difficult to represent directly in OWL. Our current strategy is to use \"atemporal\" binary relations such as part_of with the understanding that the spirit of the RO paper should be followed - i.e. any class axioms such as \"nucleus SubClassOf part_of some cell\" should be understood to hold true for any \"snapshot\" in time. We are currently working on a more formal treatment. One possible approach is to use 'temporalized relations', but this suffers from problems, and the RO is unlikely to adopt these in the near future. See this critique of BFO2 for more details. A more promising approach is either a separate interpretation or TemporallyQualifiedContinuants , but work on this proposal has not yet been completed. Rough Sketch of Approach The spirit of the approach is to treat class axioms in OWL as if they had the same meaning as class-level relations in RO2005. For example: (1) Class: nucleus SubClassOf: part_of some cell Is equivalent to writing the following FOL: (2) forall n : instance_of(n,Nucleus) -> exists c : instance_of(c,Cell) part_of(n,c) But our goal is to provide a temporal interpretation consistent with the original RO paper , as follows: (3) forall t : forall n : instance_of(n,Nucleus,t) -> exists c : instance_of(c,Cell,t) part_of(n,c,t) What is currently lacking are global generic rules that can be applied for any OWL axiom - class axiom or instance axiom. Whilst these are being developed, this rough sketch provides some guidelines. The basic idea for class axioms that use the part_of relation is: assume a \"forall t\" quantifier surrounding the direct FOL translation of the OWL. In addition, the same \"t\" variable should be added for all property assertions where a temporal argument is required. For example, the the OWL class axiom (1) above has the direct meaning: By applying the transformation specified roughly above, we move from (2) to(3). There will be exceptions to this patterns, these will be documented in the relations themselves. Inline Documentation Many RO relations are annotated with a \"temporal interpretation\" property: RO_0001900 \"temporal interpretation\" This connects an OWL object property to documentation describing how the relation should be interpreted. This is best seen from within Protege. However, it is partially visible in OntoBee - see for example http://purl.obolibrary.org/obo/BFO_0000050 - currently the description \"axiom holds at all times\" is not hyperlinked. Other examples The Gene Ontology (extended version) contains axioms such as: (1) (part_of some Nucleus) DisjointWith (part_of some mitochondrion) This has a direct interpretation that is atemporal: (2) not exists i, n, m: part_of(i,n) & part_of(i,m) & instance_of(n,Nucleus) & instance_of(m,Mitochondrion) Applying the rule above we get: (3) forall t : [ not exists i, n, m: part_of(i,n,t) & part_of(i,m,t) & instance_of(n,Nucleus,t) & instance_of(m,Mitochondrion,t) ] This is equivalent to saying \"there are no times at which there is anything that is both part of a nucleus and part of a mitochondrion\". See Also ROAndBFO Temporal Interpretations in Anatomy Ontologies","title":"Temporal Semantics"},{"location":"temporal-semantics/#introduction","text":"Relationships such as 'part_of' can change over time. For example, a cell can be part of the neuroepithelium at one time, and then detached from it at a later time. This is an important consideration in anatomy ontologies . For a detailed treatment, see the original RO paper . Unfortunately the relations in this paper are difficult to represent directly in OWL. Our current strategy is to use \"atemporal\" binary relations such as part_of with the understanding that the spirit of the RO paper should be followed - i.e. any class axioms such as \"nucleus SubClassOf part_of some cell\" should be understood to hold true for any \"snapshot\" in time. We are currently working on a more formal treatment. One possible approach is to use 'temporalized relations', but this suffers from problems, and the RO is unlikely to adopt these in the near future. See this critique of BFO2 for more details. A more promising approach is either a separate interpretation or TemporallyQualifiedContinuants , but work on this proposal has not yet been completed.","title":"Introduction"},{"location":"temporal-semantics/#rough-sketch-of-approach","text":"The spirit of the approach is to treat class axioms in OWL as if they had the same meaning as class-level relations in RO2005. For example: (1) Class: nucleus SubClassOf: part_of some cell Is equivalent to writing the following FOL: (2) forall n : instance_of(n,Nucleus) -> exists c : instance_of(c,Cell) part_of(n,c) But our goal is to provide a temporal interpretation consistent with the original RO paper , as follows: (3) forall t : forall n : instance_of(n,Nucleus,t) -> exists c : instance_of(c,Cell,t) part_of(n,c,t) What is currently lacking are global generic rules that can be applied for any OWL axiom - class axiom or instance axiom. Whilst these are being developed, this rough sketch provides some guidelines. The basic idea for class axioms that use the part_of relation is: assume a \"forall t\" quantifier surrounding the direct FOL translation of the OWL. In addition, the same \"t\" variable should be added for all property assertions where a temporal argument is required. For example, the the OWL class axiom (1) above has the direct meaning: By applying the transformation specified roughly above, we move from (2) to(3). There will be exceptions to this patterns, these will be documented in the relations themselves.","title":"Rough Sketch of Approach"},{"location":"temporal-semantics/#inline-documentation","text":"Many RO relations are annotated with a \"temporal interpretation\" property: RO_0001900 \"temporal interpretation\" This connects an OWL object property to documentation describing how the relation should be interpreted. This is best seen from within Protege. However, it is partially visible in OntoBee - see for example http://purl.obolibrary.org/obo/BFO_0000050 - currently the description \"axiom holds at all times\" is not hyperlinked.","title":"Inline Documentation"},{"location":"temporal-semantics/#other-examples","text":"The Gene Ontology (extended version) contains axioms such as: (1) (part_of some Nucleus) DisjointWith (part_of some mitochondrion) This has a direct interpretation that is atemporal: (2) not exists i, n, m: part_of(i,n) & part_of(i,m) & instance_of(n,Nucleus) & instance_of(m,Mitochondrion) Applying the rule above we get: (3) forall t : [ not exists i, n, m: part_of(i,n,t) & part_of(i,m,t) & instance_of(n,Nucleus,t) & instance_of(m,Mitochondrion,t) ] This is equivalent to saying \"there are no times at which there is anything that is both part of a nucleus and part of a mitochondrion\".","title":"Other examples"},{"location":"temporal-semantics/#see-also","text":"ROAndBFO Temporal Interpretations in Anatomy Ontologies","title":"See Also"}]}